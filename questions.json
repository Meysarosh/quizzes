{
  "Structure": {
    "React": [
      "React Basics",
      "React Components",
      "State and Props",
      "React Lifecycle Methods",
      "React Hooks",
      "React Router",
      "React Context",
      "React Performance Optimization",
      "React Virtual DOM",
      "React Testing",
      "React PropTypes",
      "React Error Boundaries",
      "React Lifecycle",
      "React State Management",
      "React Server-Side Rendering",
      "React Forms",
      "React Higher-Order Components (HOC)",
      "React Error Handling",
      "React Testing Library",
      "React Component Lifecycle",
      "React Redux",
      "React State",
      "React Props",
      "React JSX",
      "React Rendering",
      "React Events",
      "React Conditional Rendering",
      "React Fragment",
      "React Routing"
    ],
    "HTML": ["HTML"],
    "CSS": ["CSS"],
    "SCSS": ["SCSS"],
    "TypeScript": ["TypeScript"],
    "JavaScript": ["JavaScript"]
  },
  "React": [
    {
      "id": 1,
      "topic": "React Basics",
      "level": "Beginner",
      "question": "What is React?",
      "answers": {
        "1": {
          "text": "A JavaScript library for building user interfaces",
          "correct": true
        },
        "2": {
          "text": "A programming language"
        },
        "3": {
          "text": "A database management system"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 2,
      "topic": "React Components",
      "level": "Intermediate",
      "question": "What are React components?",
      "answers": {
        "1": {
          "text": "Reusable pieces of UI",
          "correct": true
        },
        "2": {
          "text": "HTML elements"
        },
        "3": {
          "text": "JavaScript functions"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 3,
      "topic": "State and Props",
      "level": "Intermediate",
      "question": "What is the difference between state and props in React?",
      "answers": {
        "1": {
          "text": "State is mutable and controlled by the component itself, whereas props are immutable and controlled by parent components",
          "correct": true
        },
        "2": {
          "text": "State and props are the same thing"
        },
        "3": {
          "text": "Props are mutable and controlled by the component itself, whereas state is immutable and controlled by parent components"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 4,
      "topic": "React Lifecycle Methods",
      "level": "Advanced",
      "question": "What are React lifecycle methods?",
      "answers": {
        "1": {
          "text": "Special methods that are invoked at specific points in a component's lifecycle",
          "correct": true
        },
        "2": {
          "text": "Methods used for rendering components"
        },
        "3": {
          "text": "Methods for handling events"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 5,
      "topic": "React Hooks",
      "level": "Intermediate",
      "question": "What are React Hooks?",
      "answers": {
        "1": {
          "text": "Functions that let you use state and other React features without writing a class",
          "correct": true
        },
        "2": {
          "text": "JavaScript libraries for React development"
        },
        "3": {
          "text": "Special components in React"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 6,
      "topic": "React Router",
      "level": "Intermediate",
      "question": "What is React Router?",
      "answers": {
        "1": {
          "text": "A library for routing in React applications",
          "correct": true
        },
        "2": {
          "text": "A form validation library"
        },
        "3": {
          "text": "A state management library"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 7,
      "topic": "React Context",
      "level": "Advanced",
      "question": "What is React Context?",
      "answers": {
        "1": {
          "text": "A feature that allows you to pass data through the component tree without having to pass props down manually at every level",
          "correct": true
        },
        "2": {
          "text": "A CSS-in-JS solution for React"
        },
        "3": {
          "text": "A testing library for React components"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 8,
      "topic": "React Performance Optimization",
      "level": "Advanced",
      "question": "How can you optimize performance in React applications?",
      "answers": {
        "1": {
          "text": "By using techniques such as memoization, code splitting, and virtualization",
          "correct": true
        },
        "2": {
          "text": "By increasing the size of the state"
        },
        "3": {
          "text": "By using more class components"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 9,
      "topic": "React Virtual DOM",
      "level": "Intermediate",
      "question": "What is the Virtual DOM in React?",
      "answers": {
        "1": {
          "text": "A lightweight copy of the actual DOM that React keeps in memory and reconciles with the real DOM",
          "correct": true
        },
        "2": {
          "text": "A separate DOM structure for server-side rendering"
        },
        "3": {
          "text": "A feature for rendering 3D graphics in React applications"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 10,
      "topic": "React Testing",
      "level": "Intermediate",
      "question": "What tools can you use for testing React components?",
      "answers": {
        "1": {
          "text": "Jest and React Testing Library",
          "correct": true
        },
        "2": {
          "text": "jQuery and Mocha"
        },
        "3": {
          "text": "Angular and Jasmine"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 11,
      "topic": "React PropTypes",
      "level": "Intermediate",
      "question": "What are PropTypes in React?",
      "answers": {
        "1": {
          "text": "A way to document the intended types of properties passed to components for validation",
          "correct": true
        },
        "2": {
          "text": "A method for defining CSS styles in React components"
        },
        "3": {
          "text": "A method for handling asynchronous operations in React"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 12,
      "topic": "React Error Boundaries",
      "level": "Advanced",
      "question": "What are React Error Boundaries?",
      "answers": {
        "1": {
          "text": "Special components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of crashing the whole application",
          "correct": true
        },
        "2": {
          "text": "Components used for handling form validation errors"
        },
        "3": {
          "text": "Components for displaying loading spinners during asynchronous operations"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 13,
      "topic": "React Hooks",
      "level": "Intermediate",
      "question": "What are the rules of using React Hooks?",
      "answers": {
        "1": {
          "text": "Only call Hooks at the top level. Only call Hooks from React functional components or custom Hooks.",
          "correct": true
        },
        "2": {
          "text": "Hooks can be called anywhere within a component.",
          "correct": false
        },
        "3": {
          "text": "Hooks can only be used with class components.",
          "correct": false
        }
      },
      "correct_answer": 1
    },
    {
      "id": 14,
      "topic": "React Router",
      "level": "Intermediate",
      "question": "What is the purpose of React Router's 'Link' component?",
      "answers": {
        "1": {
          "text": "To navigate between different routes in a React application.",
          "correct": true
        },
        "2": {
          "text": "To define CSS styles for links in a React application."
        },
        "3": {
          "text": "To connect React components to a Redux store."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 15,
      "topic": "React Context",
      "level": "Advanced",
      "question": "How can you update the context value in React Context?",
      "answers": {
        "1": {
          "text": "By using the 'Provider' component and passing a new value as a prop.",
          "correct": true
        },
        "2": {
          "text": "Context values cannot be updated once set."
        },
        "3": {
          "text": "By calling a special 'updateContext' function within a component."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 16,
      "topic": "React Performance Optimization",
      "level": "Advanced",
      "question": "What is code splitting in React?",
      "answers": {
        "1": {
          "text": "Breaking down your code into smaller chunks and only loading them when needed, which can improve performance by reducing initial loading times.",
          "correct": true
        },
        "2": {
          "text": "Removing unnecessary whitespace and comments from your code."
        },
        "3": {
          "text": "Optimizing the speed of your React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 17,
      "topic": "React Lifecycle",
      "level": "Intermediate",
      "question": "What are the different phases of the React component lifecycle?",
      "answers": {
        "1": {
          "text": "Initialization, mounting, updating, unmounting",
          "correct": true
        },
        "2": {
          "text": "Creation, rendering, destruction"
        },
        "3": {
          "text": "Preparation, execution, completion"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 18,
      "topic": "React State Management",
      "level": "Intermediate",
      "question": "What are some popular libraries for managing state in React applications?",
      "answers": {
        "1": {
          "text": "Redux, MobX, Context API",
          "correct": true
        },
        "2": {
          "text": "Angular, Vue, Backbone"
        },
        "3": {
          "text": "jQuery, Lodash, Underscore"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 19,
      "topic": "React Performance Optimization",
      "level": "Advanced",
      "question": "What is memoization and how can it be used to optimize performance in React?",
      "answers": {
        "1": {
          "text": "Memoization is a technique for caching the results of expensive function calls and reusing them when the same inputs occur again. It can be used in React to prevent unnecessary re-renders of components.",
          "correct": true
        },
        "2": {
          "text": "Memoization is a technique for rendering components asynchronously to improve performance."
        },
        "3": {
          "text": "Memoization is a technique for reducing the size of the React codebase by removing unused code."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 20,
      "topic": "React Server-Side Rendering",
      "level": "Advanced",
      "question": "What is server-side rendering (SSR) in React and why is it important?",
      "answers": {
        "1": {
          "text": "Server-side rendering is the process of rendering React components on the server side and sending the resulting HTML to the client. It is important for improving performance and SEO.",
          "correct": true
        },
        "2": {
          "text": "Server-side rendering is the process of rendering React components on the client side."
        },
        "3": {
          "text": "Server-side rendering is the process of optimizing React components for server environments."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 21,
      "topic": "React Forms",
      "level": "Intermediate",
      "question": "What is controlled and uncontrolled components in React forms?",
      "answers": {
        "1": {
          "text": "Controlled components are components where form data is handled by React state, while uncontrolled components are components where form data is handled by the DOM.",
          "correct": true
        },
        "2": {
          "text": "Controlled components are components that don't have any form inputs, while uncontrolled components are components that have form inputs."
        },
        "3": {
          "text": "Controlled components are components that use external libraries for form handling, while uncontrolled components are components that use native React form handling."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 22,
      "topic": "React Higher-Order Components (HOC)",
      "level": "Intermediate",
      "question": "What are Higher-Order Components (HOC) in React?",
      "answers": {
        "1": {
          "text": "Higher-Order Components are functions that take a component and return a new component with additional functionality.",
          "correct": true
        },
        "2": {
          "text": "Higher-Order Components are components with higher priority in the component tree."
        },
        "3": {
          "text": "Higher-Order Components are components that render other components in a hierarchy."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 23,
      "topic": "React Error Handling",
      "level": "Advanced",
      "question": "How can you handle errors in React components?",
      "answers": {
        "1": {
          "text": "Using Error Boundaries, a React feature that captures JavaScript errors in a component tree and displays a fallback UI instead of crashing the whole application.",
          "correct": true
        },
        "2": {
          "text": "By using try-catch blocks within the component's render method."
        },
        "3": {
          "text": "By logging errors to the console and letting the application crash."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 24,
      "topic": "React Testing Library",
      "level": "Advanced",
      "question": "What is the React Testing Library and how is it used?",
      "answers": {
        "1": {
          "text": "The React Testing Library is a testing utility for React that provides a simple and intuitive API for testing React components.",
          "correct": true
        },
        "2": {
          "text": "The React Testing Library is a library for mocking HTTP requests in React applications."
        },
        "3": {
          "text": "The React Testing Library is a library for benchmarking performance of React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 25,
      "topic": "React Hooks",
      "level": "Intermediate",
      "question": "What is the useEffect hook used for in React?",
      "answers": {
        "1": {
          "text": "To perform side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM.",
          "correct": true
        },
        "2": {
          "text": "To handle user events, such as onClick or onChange, in functional components."
        },
        "3": {
          "text": "To manage state in functional components, similar to the useState hook."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 26,
      "topic": "React Context",
      "level": "Intermediate",
      "question": "When should you use React Context instead of props?",
      "answers": {
        "1": {
          "text": "When passing data through many levels of nested components or when the data is used by many components at different nesting levels.",
          "correct": true
        },
        "2": {
          "text": "When passing data to only one level of nested components."
        },
        "3": {
          "text": "When the data needs to be accessed only within the same component."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 27,
      "topic": "React Router",
      "level": "Advanced",
      "question": "What is code-splitting in React Router?",
      "answers": {
        "1": {
          "text": "Code-splitting is the technique of splitting your code into smaller chunks and loading them on demand, which can improve performance by reducing initial loading times.",
          "correct": true
        },
        "2": {
          "text": "Code-splitting is a feature for rendering multiple routes simultaneously."
        },
        "3": {
          "text": "Code-splitting is a method for protecting routes from unauthorized access."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 28,
      "topic": "React Performance Optimization",
      "level": "Advanced",
      "question": "How can you optimize the rendering performance of a React application?",
      "answers": {
        "1": {
          "text": "By using techniques such as memoization, code-splitting, and minimizing re-renders with PureComponent or shouldComponentUpdate.",
          "correct": true
        },
        "2": {
          "text": "By increasing the size of the state and props passed to components."
        },
        "3": {
          "text": "By rendering all components synchronously to minimize the time to first render."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 29,
      "topic": "React Testing",
      "level": "Intermediate",
      "question": "What is snapshot testing in React?",
      "answers": {
        "1": {
          "text": "Snapshot testing is a way of testing React components by capturing their current state and comparing it to a stored snapshot of the component's expected output.",
          "correct": true
        },
        "2": {
          "text": "Snapshot testing is a method for testing the performance of React components."
        },
        "3": {
          "text": "Snapshot testing is a technique for mocking HTTP requests in React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 30,
      "topic": "React Forms",
      "level": "Intermediate",
      "question": "What is the purpose of the 'defaultValue' attribute in React form inputs?",
      "answers": {
        "1": {
          "text": "The 'defaultValue' attribute sets the initial value of an input that cannot be changed by the user.",
          "correct": true
        },
        "2": {
          "text": "The 'defaultValue' attribute specifies the default styling for form inputs."
        },
        "3": {
          "text": "The 'defaultValue' attribute determines the order in which form inputs are rendered."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 31,
      "topic": "React Lifecycle Methods",
      "level": "Advanced",
      "question": "What are the differences between componentDidMount and componentDidUpdate lifecycle methods?",
      "answers": {
        "1": {
          "text": "componentDidMount is called after the component has been rendered to the DOM for the first time, while componentDidUpdate is called after the component's updates are flushed to the DOM.",
          "correct": true
        },
        "2": {
          "text": "componentDidMount is called every time the component's state or props change, while componentDidUpdate is called only once after the initial render."
        },
        "3": {
          "text": "componentDidMount is called before the component's updates are flushed to the DOM, while componentDidUpdate is called after the component has been rendered to the DOM."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 32,
      "topic": "React Error Handling",
      "level": "Advanced",
      "question": "What are some common techniques for logging errors in React applications?",
      "answers": {
        "1": {
          "text": "Using error boundaries to catch errors in a component tree, logging errors to a server, and using tools like Sentry or LogRocket for error monitoring.",
          "correct": true
        },
        "2": {
          "text": "Using console.log statements throughout the codebase to log errors."
        },
        "3": {
          "text": "Using try-catch blocks to catch errors in React components and logging them to the console."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 33,
      "topic": "React Hooks",
      "level": "Intermediate",
      "question": "What is the purpose of the useState hook in React?",
      "answers": {
        "1": {
          "text": "To add state management to functional components.",
          "correct": true
        },
        "2": {
          "text": "To create custom hooks for reusable logic."
        },
        "3": {
          "text": "To handle side effects in functional components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 34,
      "topic": "React Component Lifecycle",
      "level": "Intermediate",
      "question": "What is the componentWillUnmount method used for?",
      "answers": {
        "1": {
          "text": "To perform cleanup before the component is removed from the DOM.",
          "correct": true
        },
        "2": {
          "text": "To update the component's state before it is removed from the DOM."
        },
        "3": {
          "text": "To render the component's children components before it is removed from the DOM."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 35,
      "topic": "React Router",
      "level": "Advanced",
      "question": "What are dynamic routes in React Router?",
      "answers": {
        "1": {
          "text": "Routes whose paths are determined dynamically based on certain conditions or data.",
          "correct": true
        },
        "2": {
          "text": "Routes that can only be accessed by authenticated users."
        },
        "3": {
          "text": "Routes that are loaded asynchronously from the server."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 36,
      "topic": "React Context",
      "level": "Advanced",
      "question": "What are some advantages of using React Context over prop drilling?",
      "answers": {
        "1": {
          "text": "Avoids deeply nested prop passing, reduces component coupling, and makes state management more centralized.",
          "correct": true
        },
        "2": {
          "text": "Allows for better optimization of component rendering."
        },
        "3": {
          "text": "Provides better type safety for component props."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 37,
      "topic": "React Redux",
      "level": "Intermediate",
      "question": "What is Redux and how does it work with React?",
      "answers": {
        "1": {
          "text": "Redux is a predictable state container for JavaScript apps. It works with React by providing a centralized store for managing application state.",
          "correct": true
        },
        "2": {
          "text": "Redux is a CSS-in-JS library for styling React components."
        },
        "3": {
          "text": "Redux is a testing utility for React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 38,
      "topic": "React Context",
      "level": "Intermediate",
      "question": "What is the difference between React Context and Redux?",
      "answers": {
        "1": {
          "text": "React Context provides a way to pass data through the component tree without having to pass props down manually at every level, while Redux is a predictable state container for managing application state across the entire application.",
          "correct": true
        },
        "2": {
          "text": "React Context is used for styling React components, while Redux is used for managing application state."
        },
        "3": {
          "text": "React Context is a utility for testing React components, while Redux is a library for routing in React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 39,
      "topic": "React Performance Optimization",
      "level": "Advanced",
      "question": "What are some techniques for optimizing performance in React applications?",
      "answers": {
        "1": {
          "text": "Memoization, code splitting, lazy loading, virtualization, and minimizing re-renders.",
          "correct": true
        },
        "2": {
          "text": "Using more class components instead of functional components."
        },
        "3": {
          "text": "Increasing the size of the state and props passed to components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 40,
      "topic": "React Hooks",
      "level": "Advanced",
      "question": "What are custom hooks in React?",
      "answers": {
        "1": {
          "text": "Custom hooks are functions that allow you to extract and reuse logic across multiple components in a React application.",
          "correct": true
        },
        "2": {
          "text": "Custom hooks are special components used for styling React applications."
        },
        "3": {
          "text": "Custom hooks are part of the React testing library."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 41,
      "topic": "React Component Lifecycle",
      "level": "Intermediate",
      "question": "What is the purpose of the getDerivedStateFromProps lifecycle method in React?",
      "answers": {
        "1": {
          "text": "To update the state of a component based on changes to props before rendering.",
          "correct": true
        },
        "2": {
          "text": "To fetch data from an external API and update the component's state."
        },
        "3": {
          "text": "To execute code after the component has been rendered to the DOM."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 42,
      "topic": "React Router",
      "level": "Intermediate",
      "question": "What is the purpose of the 'exact' attribute in React Router's Route component?",
      "answers": {
        "1": {
          "text": "To ensure that the Route component only matches the exact path specified in the URL.",
          "correct": true
        },
        "2": {
          "text": "To specify the exact number of components to render."
        },
        "3": {
          "text": "To render the Route component with exact precision in terms of styling."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 43,
      "topic": "React Context",
      "level": "Advanced",
      "question": "How can you dynamically update a React context value?",
      "answers": {
        "1": {
          "text": "By using the useContext hook along with the useState hook to update the context value.",
          "correct": false
        },
        "2": {
          "text": "By passing a function to the Provider component's value prop, which receives the previous context value and returns the updated context value.",
          "correct": true
        },
        "3": {
          "text": "By directly mutating the context value within a component."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 44,
      "topic": "React Hooks",
      "level": "Advanced",
      "question": "What are the rules of using custom hooks in React?",
      "answers": {
        "1": {
          "text": "Custom hooks must always start with the word 'use' and can only be used in functional components.",
          "correct": true
        },
        "2": {
          "text": "Custom hooks must be used within class components and cannot return any values."
        },
        "3": {
          "text": "Custom hooks cannot call other hooks within their implementation."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 45,
      "topic": "React Hooks",
      "level": "Intermediate",
      "question": "What is the purpose of the useCallback hook in React?",
      "answers": {
        "1": {
          "text": "To memoize functions and prevent unnecessary re-renders of child components.",
          "correct": true
        },
        "2": {
          "text": "To fetch data from an API endpoint."
        },
        "3": {
          "text": "To manage side effects in functional components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 46,
      "topic": "React Performance Optimization",
      "level": "Intermediate",
      "question": "What is lazy loading in React and how can it improve performance?",
      "answers": {
        "1": {
          "text": "Lazy loading is a technique for deferring the loading of non-essential resources until they are needed, which can reduce the initial load time of a web page.",
          "correct": true
        },
        "2": {
          "text": "Lazy loading is a method for optimizing the rendering speed of React components."
        },
        "3": {
          "text": "Lazy loading is a feature for reducing the size of the React codebase by removing unused code."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 47,
      "topic": "React Context",
      "level": "Advanced",
      "question": "How can you consume multiple contexts in a single component in React?",
      "answers": {
        "1": {
          "text": "By using the useContext hook multiple times, once for each context.",
          "correct": true
        },
        "2": {
          "text": "By nesting multiple Provider components within the component."
        },
        "3": {
          "text": "By passing multiple contexts as props to the component."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 48,
      "topic": "React Router",
      "level": "Advanced",
      "question": "What are nested routes in React Router?",
      "answers": {
        "1": {
          "text": "Nested routes are routes that are defined within the scope of another route, allowing for hierarchical routing structures.",
          "correct": true
        },
        "2": {
          "text": "Nested routes are routes that are loaded asynchronously from the server."
        },
        "3": {
          "text": "Nested routes are routes that are rendered conditionally based on user authentication."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 49,
      "topic": "React Basics",
      "level": "Easy",
      "question": "What is React?",
      "answers": {
        "1": {
          "text": "React is a JavaScript library for building user interfaces.",
          "correct": true
        },
        "2": {
          "text": "React is a programming language."
        },
        "3": {
          "text": "React is a server-side rendering framework."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 50,
      "topic": "React Components",
      "level": "Easy",
      "question": "What are React components?",
      "answers": {
        "1": {
          "text": "Reusable building blocks that represent parts of a user interface.",
          "correct": true
        },
        "2": {
          "text": "JavaScript functions for fetching data from an API."
        },
        "3": {
          "text": "HTML elements used for styling React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 51,
      "topic": "React State",
      "level": "Easy",
      "question": "What is React state?",
      "answers": {
        "1": {
          "text": "An object that represents the data a component needs to keep track of.",
          "correct": true
        },
        "2": {
          "text": "A function for rendering JSX elements."
        },
        "3": {
          "text": "A way to define CSS styles in React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 52,
      "topic": "React Props",
      "level": "Easy",
      "question": "What are props in React?",
      "answers": {
        "1": {
          "text": "Short for properties, props are a way of passing data from parent to child components.",
          "correct": true
        },
        "2": {
          "text": "Functions for updating component state."
        },
        "3": {
          "text": "HTML attributes used for styling React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 53,
      "topic": "React JSX",
      "level": "Easy",
      "question": "What is JSX in React?",
      "answers": {
        "1": {
          "text": "JSX is a syntax extension for JavaScript, which allows writing HTML-like code within JavaScript.",
          "correct": true
        },
        "2": {
          "text": "JSX is a JavaScript framework for building user interfaces."
        },
        "3": {
          "text": "JSX is a tool for optimizing React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 54,
      "topic": "React Rendering",
      "level": "Easy",
      "question": "How does React handle rendering?",
      "answers": {
        "1": {
          "text": "React uses a virtual DOM to efficiently update the actual DOM.",
          "correct": true
        },
        "2": {
          "text": "React directly manipulates the actual DOM for rendering."
        },
        "3": {
          "text": "React uses server-side rendering for all components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 55,
      "topic": "React Components",
      "level": "Easy",
      "question": "What are functional components in React?",
      "answers": {
        "1": {
          "text": "Functional components are a way to define React components using JavaScript functions.",
          "correct": true
        },
        "2": {
          "text": "Functional components are components that only render HTML elements."
        },
        "3": {
          "text": "Functional components are components used for handling user events."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 56,
      "topic": "React Lifecycle",
      "level": "Easy",
      "question": "What is the componentDidMount lifecycle method used for?",
      "answers": {
        "1": {
          "text": "To perform actions after a component has been rendered to the DOM.",
          "correct": true
        },
        "2": {
          "text": "To update the component's state after a re-render."
        },
        "3": {
          "text": "To handle errors that occur during rendering."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 57,
      "topic": "React State Management",
      "level": "Easy",
      "question": "What is state management in React?",
      "answers": {
        "1": {
          "text": "State management involves managing data within React components to control their behavior and appearance.",
          "correct": true
        },
        "2": {
          "text": "State management refers to the process of rendering React components."
        },
        "3": {
          "text": "State management involves routing between different components in a React application."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 58,
      "topic": "React Events",
      "level": "Easy",
      "question": "How do you handle events in React?",
      "answers": {
        "1": {
          "text": "By using event handlers like onClick, onChange, etc., within JSX elements.",
          "correct": true
        },
        "2": {
          "text": "By directly manipulating the DOM elements."
        },
        "3": {
          "text": "By defining event listeners in the component's constructor."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 59,
      "topic": "React Props",
      "level": "Easy",
      "question": "What are default props in React?",
      "answers": {
        "1": {
          "text": "Default props are values assigned to props that are used when no value is provided from a parent component.",
          "correct": true
        },
        "2": {
          "text": "Default props are props that are automatically passed to all components."
        },
        "3": {
          "text": "Default props are used to set initial state in React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 60,
      "topic": "React Hooks",
      "level": "Easy",
      "question": "What is the useState hook used for in React?",
      "answers": {
        "1": {
          "text": "To add state to functional components.",
          "correct": true
        },
        "2": {
          "text": "To handle side effects in functional components."
        },
        "3": {
          "text": "To define event handlers in functional components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 61,
      "topic": "React Conditional Rendering",
      "level": "Easy",
      "question": "What is conditional rendering in React?",
      "answers": {
        "1": {
          "text": "Conditional rendering is the practice of rendering different components or elements based on certain conditions.",
          "correct": true
        },
        "2": {
          "text": "Conditional rendering refers to rendering components conditionally based on user interactions."
        },
        "3": {
          "text": "Conditional rendering is a method for optimizing the performance of React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 62,
      "topic": "React Component Lifecycle",
      "level": "Easy",
      "question": "What is the render method in a React class component used for?",
      "answers": {
        "1": {
          "text": "To render the component's JSX markup to the DOM.",
          "correct": true
        },
        "2": {
          "text": "To update the component's state."
        },
        "3": {
          "text": "To perform cleanup tasks before the component is removed from the DOM."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 63,
      "topic": "React Hooks",
      "level": "Easy",
      "question": "What is the useEffect hook used for in React?",
      "answers": {
        "1": {
          "text": "To perform side effects in functional components, such as data fetching or DOM manipulation.",
          "correct": true
        },
        "2": {
          "text": "To manage component state in functional components."
        },
        "3": {
          "text": "To handle user events in functional components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 64,
      "topic": "React Fragment",
      "level": "Easy",
      "question": "What is a React Fragment?",
      "answers": {
        "1": {
          "text": "A React Fragment is a built-in component used to group multiple children elements without adding extra nodes to the DOM.",
          "correct": true
        },
        "2": {
          "text": "A React Fragment is a method for rendering HTML elements in React applications."
        },
        "3": {
          "text": "A React Fragment is a type of CSS selector used for styling React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 349,
      "topic": "React Components",
      "level": "Easy",
      "question": "What is a class component in React?",
      "answers": {
        "1": {
          "text": "A class component is a JavaScript class that extends React.Component and has its own state and lifecycle methods.",
          "correct": true
        },
        "2": {
          "text": "A class component is a function that returns JSX elements."
        },
        "3": {
          "text": "A class component is a component used for handling user events in React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 350,
      "topic": "React Rendering",
      "level": "Easy",
      "question": "What is the purpose of the render method in React components?",
      "answers": {
        "1": {
          "text": "The render method is used to define the structure of the component's output, which React will then render to the DOM.",
          "correct": true
        },
        "2": {
          "text": "The render method is used to update the component's state."
        },
        "3": {
          "text": "The render method is used to handle user interactions within the component."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 351,
      "topic": "React Props",
      "level": "Easy",
      "question": "How do you pass props to a component in React?",
      "answers": {
        "1": {
          "text": "By adding attributes to the component's JSX element, each attribute representing a prop.",
          "correct": true
        },
        "2": {
          "text": "By using the setProps method within the component."
        },
        "3": {
          "text": "By using the useState hook within the component."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 352,
      "topic": "React Lifecycle",
      "level": "Easy",
      "question": "What is the constructor method used for in React class components?",
      "answers": {
        "1": {
          "text": "The constructor method is used for initializing the component's state and binding event handlers.",
          "correct": true
        },
        "2": {
          "text": "The constructor method is used for rendering JSX elements."
        },
        "3": {
          "text": "The constructor method is used for handling component updates."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 65,
      "topic": "React Hooks",
      "level": "Easy",
      "question": "What is the useState hook used for in React?",
      "answers": {
        "1": {
          "text": "To add state to functional components.",
          "correct": true
        },
        "2": {
          "text": "To perform side effects in functional components."
        },
        "3": {
          "text": "To handle lifecycle methods in functional components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 66,
      "topic": "React Lifecycle",
      "level": "Easy",
      "question": "What is the componentDidMount lifecycle method used for?",
      "answers": {
        "1": {
          "text": "To perform actions after the component has been rendered to the DOM.",
          "correct": true
        },
        "2": {
          "text": "To update the component's state after a re-render."
        },
        "3": {
          "text": "To handle errors that occur during rendering."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 67,
      "topic": "React JSX",
      "level": "Easy",
      "question": "What is JSX in React?",
      "answers": {
        "1": {
          "text": "JSX is a syntax extension for JavaScript, which allows writing HTML-like code within JavaScript.",
          "correct": true
        },
        "2": {
          "text": "JSX is a JavaScript framework for building user interfaces."
        },
        "3": {
          "text": "JSX is a tool for optimizing React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 68,
      "topic": "React Components",
      "level": "Easy",
      "question": "What are functional components in React?",
      "answers": {
        "1": {
          "text": "Functional components are a way to define React components using JavaScript functions.",
          "correct": true
        },
        "2": {
          "text": "Functional components are components that only render HTML elements."
        },
        "3": {
          "text": "Functional components are components used for handling user events in React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 69,
      "topic": "React Props",
      "level": "Easy",
      "question": "What are props in React?",
      "answers": {
        "1": {
          "text": "Props are short for properties and are used for passing data from parent to child components.",
          "correct": true
        },
        "2": {
          "text": "Props are used for defining component styles."
        },
        "3": {
          "text": "Props are reserved keywords in React for handling asynchronous operations."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 70,
      "topic": "React Components",
      "level": "Easy",
      "question": "What is a functional component in React?",
      "answers": {
        "1": {
          "text": "A functional component is a JavaScript function that accepts props and returns JSX elements.",
          "correct": true
        },
        "2": {
          "text": "A functional component is a class-based component."
        },
        "3": {
          "text": "A functional component is a component used for handling user events."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 71,
      "topic": "React State",
      "level": "Easy",
      "question": "What is state in React?",
      "answers": {
        "1": {
          "text": "State is an object that represents the data a component needs to keep track of.",
          "correct": true
        },
        "2": {
          "text": "State is a method used for rendering JSX elements."
        },
        "3": {
          "text": "State is a way to define CSS styles in React components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 72,
      "topic": "React Lifecycle",
      "level": "Easy",
      "question": "What is the purpose of the componentDidMount method in React?",
      "answers": {
        "1": {
          "text": "To perform actions after the component has been rendered to the DOM.",
          "correct": true
        },
        "2": {
          "text": "To update the component's state after a re-render."
        },
        "3": {
          "text": "To handle errors that occur during rendering."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 73,
      "topic": "React Lifecycle",
      "level": "Easy",
      "question": "What is the componentWillUnmount method used for in React?",
      "answers": {
        "1": {
          "text": "To perform cleanup before the component is removed from the DOM.",
          "correct": true
        },
        "2": {
          "text": "To update the component's state before it is removed from the DOM."
        },
        "3": {
          "text": "To render the component's children components before it is removed from the DOM."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 74,
      "topic": "React Hooks",
      "level": "Easy",
      "question": "What is the purpose of the useEffect hook in React?",
      "answers": {
        "1": {
          "text": "To perform side effects in functional components.",
          "correct": true
        },
        "2": {
          "text": "To add state to functional components."
        },
        "3": {
          "text": "To define event handlers in functional components."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 75,
      "topic": "React Routing",
      "level": "Easy",
      "question": "What is React Router used for?",
      "answers": {
        "1": {
          "text": "React Router is a library used for handling routing in React applications.",
          "correct": true
        },
        "2": {
          "text": "React Router is a tool for optimizing performance in React applications."
        },
        "3": {
          "text": "React Router is a library used for state management in React applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 76,
      "topic": "React Hooks",
      "level": "Easy",
      "question": "What is the useState hook used for?",
      "answers": {
        "1": {
          "text": "To add state to functional components.",
          "correct": true
        },
        "2": {
          "text": "To perform side effects in functional components."
        },
        "3": {
          "text": "To define event handlers in functional components."
        }
      },
      "correct_answer": 1
    }
  ],
  "HTML": [
    {
      "id": 77,
      "topic": "HTML",
      "level": "Easy",
      "question": "What does HTML stand for?",
      "answers": {
        "1": {
          "text": "Hypertext Markup Language",
          "correct": true
        },
        "2": {
          "text": "Hyperlink and Text Markup Language"
        },
        "3": {
          "text": "High Text Markup Language"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 78,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <div> element in HTML?",
      "answers": {
        "1": {
          "text": "To group and style content.",
          "correct": true
        },
        "2": {
          "text": "To create links to other documents."
        },
        "3": {
          "text": "To define a list of items."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 79,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the difference between HTML and XHTML?",
      "answers": {
        "1": {
          "text": "XHTML is a stricter and cleaner version of HTML, requiring adherence to XML syntax rules.",
          "correct": true
        },
        "2": {
          "text": "HTML is the latest version of XHTML with added features."
        },
        "3": {
          "text": "There is no difference between HTML and XHTML."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 80,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <canvas> element in HTML5?",
      "answers": {
        "1": {
          "text": "To draw graphics, animations, or other visual images on the fly using JavaScript.",
          "correct": true
        },
        "2": {
          "text": "To embed audio or video content."
        },
        "3": {
          "text": "To display tabular data."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 81,
      "topic": "HTML",
      "level": "Easy",
      "question": "What is the purpose of the <img> element in HTML?",
      "answers": {
        "1": {
          "text": "To embed images into a web page.",
          "correct": true
        },
        "2": {
          "text": "To create hyperlinks to other documents."
        },
        "3": {
          "text": "To display a video file."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 82,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the function of the <head> element in HTML?",
      "answers": {
        "1": {
          "text": "To contain metadata and other header elements such as title and links to external resources.",
          "correct": true
        },
        "2": {
          "text": "To define the main content of the document."
        },
        "3": {
          "text": "To include visible content on the web page."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 83,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is semantic HTML?",
      "answers": {
        "1": {
          "text": "Semantic HTML is a way of writing HTML that emphasizes the meaning of the content rather than its presentation.",
          "correct": true
        },
        "2": {
          "text": "Semantic HTML is used to embed multimedia content like videos and audio."
        },
        "3": {
          "text": "Semantic HTML is a version of HTML with additional features for building interactive web applications."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 84,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <figure> and <figcaption> elements in HTML?",
      "answers": {
        "1": {
          "text": "To group together media content and its caption.",
          "correct": true
        },
        "2": {
          "text": "To define a section in a document."
        },
        "3": {
          "text": "To create a sidebar navigation menu."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 85,
      "topic": "HTML",
      "level": "Easy",
      "question": "What does HTML5 introduce as a new form of element?",
      "answers": {
        "1": {
          "text": "The <video> element for embedding videos.",
          "correct": true
        },
        "2": {
          "text": "The <form> element for creating web forms."
        },
        "3": {
          "text": "The <audio> element for embedding audio files."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 86,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <nav> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a section in a document.",
          "correct": false
        },
        "2": {
          "text": "To represent navigation links.",
          "correct": true
        },
        "3": {
          "text": "To group related form elements together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 87,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the difference between <ol> and <ul> elements in HTML?",
      "answers": {
        "1": {
          "text": "<ol> represents an ordered list with numbers or letters as list items, while <ul> represents an unordered list with bullet points.",
          "correct": true
        },
        "2": {
          "text": "<ol> represents an unordered list with bullet points, while <ul> represents an ordered list with numbers or letters as list items."
        },
        "3": {
          "text": "There is no difference between <ol> and <ul> elements."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 88,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <header> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a header for a document or section.",
          "correct": true
        },
        "2": {
          "text": "To represent the introductory content of a page."
        },
        "3": {
          "text": "To group together navigation links."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 89,
      "topic": "HTML",
      "level": "Easy",
      "question": "What is the purpose of the <a> element in HTML?",
      "answers": {
        "1": {
          "text": "To create hyperlinks to other documents or resources.",
          "correct": true
        },
        "2": {
          "text": "To display an image."
        },
        "3": {
          "text": "To define a paragraph of text."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 90,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <article> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a section in a document.",
          "correct": false
        },
        "2": {
          "text": "To represent a self-contained piece of content that could be distributed and reused independently.",
          "correct": true
        },
        "3": {
          "text": "To group together navigation links."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 91,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the difference between the <br> and <hr> elements in HTML?",
      "answers": {
        "1": {
          "text": "<br> creates a line break, while <hr> creates a horizontal rule (line).",
          "correct": true
        },
        "2": {
          "text": "<br> creates a horizontal rule (line), while <hr> creates a line break."
        },
        "3": {
          "text": "There is no difference between <br> and <hr> elements."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 92,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <footer> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a footer for a document or section.",
          "correct": true
        },
        "2": {
          "text": "To represent the main content of a page."
        },
        "3": {
          "text": "To group together navigation links."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 93,
      "topic": "HTML",
      "level": "Easy",
      "question": "What is the purpose of the <table> element in HTML?",
      "answers": {
        "1": {
          "text": "To display tabular data.",
          "correct": true
        },
        "2": {
          "text": "To define a section in a document."
        },
        "3": {
          "text": "To create hyperlinks to other documents or resources."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 94,
      "topic": "HTML",
      "level": "Easy",
      "question": "What is the purpose of the <form> element in HTML?",
      "answers": {
        "1": {
          "text": "To create a form for user input.",
          "correct": true
        },
        "2": {
          "text": "To define a section in a document."
        },
        "3": {
          "text": "To display an image."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 95,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <abbr> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a block of quoted text.",
          "correct": false
        },
        "2": {
          "text": "To mark up abbreviations and acronyms.",
          "correct": true
        },
        "3": {
          "text": "To represent a navigation link."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 96,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <aside> element in HTML?",
      "answers": {
        "1": {
          "text": "To define additional content that is tangentially related to the content around it.",
          "correct": true
        },
        "2": {
          "text": "To define a section in a document."
        },
        "3": {
          "text": "To create a sidebar navigation menu."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 97,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <blockquote> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a block of quoted text.",
          "correct": true
        },
        "2": {
          "text": "To represent a section in a document."
        },
        "3": {
          "text": "To create a sidebar navigation menu."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 98,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <details> and <summary> elements in HTML?",
      "answers": {
        "1": {
          "text": "To define a section in a document.",
          "correct": false
        },
        "2": {
          "text": "To represent a form and its controls.",
          "correct": false
        },
        "3": {
          "text": "To create a disclosure widget that can be toggled to show or hide content.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 99,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <mark> element in HTML?",
      "answers": {
        "1": {
          "text": "To highlight portions of text with a different background color.",
          "correct": true
        },
        "2": {
          "text": "To define a section in a document."
        },
        "3": {
          "text": "To create a sidebar navigation menu."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 100,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <meter> element in HTML?",
      "answers": {
        "1": {
          "text": "To represent scalar measurements or fractional values within a known range.",
          "correct": true
        },
        "2": {
          "text": "To define a block of quoted text."
        },
        "3": {
          "text": "To create a sidebar navigation menu."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 101,
      "topic": "HTML",
      "level": "Easy",
      "question": "What is the purpose of the <meta> element in HTML?",
      "answers": {
        "1": {
          "text": "To specify metadata about the HTML document, such as character set, author, and description.",
          "correct": true
        },
        "2": {
          "text": "To create a list of items with bullets."
        },
        "3": {
          "text": "To embed multimedia content like videos and audio."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 102,
      "topic": "HTML",
      "level": "Easy",
      "question": "Which attribute is used to specify the URL of the image in the <img> element?",
      "answers": {
        "1": {
          "text": "src",
          "correct": true
        },
        "2": {
          "text": "alt"
        },
        "3": {
          "text": "href"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 103,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <time> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a section in a document.",
          "correct": false
        },
        "2": {
          "text": "To represent a form and its controls.",
          "correct": false
        },
        "3": {
          "text": "To represent a specific period in time, such as a date or a time.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 104,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <code> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a block of code.",
          "correct": false
        },
        "2": {
          "text": "To represent a computer code snippet.",
          "correct": true
        },
        "3": {
          "text": "To create a sidebar navigation menu."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 105,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <nav> element in HTML5?",
      "answers": {
        "1": {
          "text": "To define a section in a document.",
          "correct": false
        },
        "2": {
          "text": "To represent navigation links.",
          "correct": true
        },
        "3": {
          "text": "To group related form elements together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 106,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <datalist> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a block of quoted text.",
          "correct": false
        },
        "2": {
          "text": "To represent a section in a document.",
          "correct": false
        },
        "3": {
          "text": "To provide a predefined list of options for input fields.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 107,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <figcaption> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a section in a document.",
          "correct": false
        },
        "2": {
          "text": "To represent the main content of a page.",
          "correct": false
        },
        "3": {
          "text": "To provide a caption or description for a <figure> element.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 108,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <s> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a section in a document.",
          "correct": false
        },
        "2": {
          "text": "To represent a computer code snippet.",
          "correct": false
        },
        "3": {
          "text": "To represent text that is no longer correct or relevant.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 109,
      "topic": "HTML",
      "level": "Easy",
      "question": "What is the purpose of the <head> element in HTML?",
      "answers": {
        "1": {
          "text": "To define the main content of the document.",
          "correct": false
        },
        "2": {
          "text": "To contain metadata and other header elements such as title and links to external resources.",
          "correct": true
        },
        "3": {
          "text": "To represent navigation links."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 110,
      "topic": "HTML",
      "level": "Easy",
      "question": "Which HTML element is used to specify a paragraph?",
      "answers": {
        "1": {
          "text": "<p>",
          "correct": true
        },
        "2": {
          "text": "<paragraph>"
        },
        "3": {
          "text": "<para>"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 111,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the 'alt' attribute in the <img> element?",
      "answers": {
        "1": {
          "text": "To specify the alignment of the image.",
          "correct": false
        },
        "2": {
          "text": "To specify the alternative text for an image.",
          "correct": true
        },
        "3": {
          "text": "To specify the source URL of the image."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 112,
      "topic": "HTML",
      "level": "Medium",
      "question": "What is the purpose of the <strong> element in HTML?",
      "answers": {
        "1": {
          "text": "To create a bold text.",
          "correct": true
        },
        "2": {
          "text": "To create a section in a document."
        },
        "3": {
          "text": "To create a link to another document."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 113,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <video> element in HTML?",
      "answers": {
        "1": {
          "text": "To embed audio content into a web page.",
          "correct": false
        },
        "2": {
          "text": "To embed video content into a web page.",
          "correct": true
        },
        "3": {
          "text": "To create a form for user input."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 114,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the 'href' attribute in the <a> element?",
      "answers": {
        "1": {
          "text": "To specify the source URL of the image.",
          "correct": false
        },
        "2": {
          "text": "To specify the alignment of the image."
        },
        "3": {
          "text": "To specify the URL of the page the link goes to.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 115,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <figure> element in HTML?",
      "answers": {
        "1": {
          "text": "To group together navigation links.",
          "correct": false
        },
        "2": {
          "text": "To represent the main content of a page.",
          "correct": false
        },
        "3": {
          "text": "To encapsulate a media object, such as an image or video, along with its caption.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 116,
      "topic": "HTML",
      "level": "Hard",
      "question": "What is the purpose of the <cite> element in HTML?",
      "answers": {
        "1": {
          "text": "To define a citation or reference to a creative work.",
          "correct": true
        },
        "2": {
          "text": "To create a sidebar navigation menu."
        },
        "3": {
          "text": "To represent text that has been deleted or removed."
        }
      },
      "correct_answer": 1
    }
  ],
  "CSS": [
    {
      "id": 117,
      "topic": "CSS",
      "level": "Easy",
      "question": "What does CSS stand for?",
      "answers": {
        "1": {
          "text": "Cascading Style Sheets",
          "correct": true
        },
        "2": {
          "text": "Cascading System Styles"
        },
        "3": {
          "text": "Creative Styling Sheets"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 118,
      "topic": "CSS",
      "level": "Easy",
      "question": "Which CSS property is used to change the text color of an element?",
      "answers": {
        "1": {
          "text": "color",
          "correct": true
        },
        "2": {
          "text": "text-color"
        },
        "3": {
          "text": "font-color"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 119,
      "topic": "CSS",
      "level": "Medium",
      "question": "What does the 'box-sizing' property in CSS control?",
      "answers": {
        "1": {
          "text": "The spacing between elements."
        },
        "2": {
          "text": "The sizing behavior of the element's box model.",
          "correct": true
        },
        "3": {
          "text": "The positioning of the element within its container."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 120,
      "topic": "CSS",
      "level": "Medium",
      "question": "What is the purpose of the 'z-index' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the size of the font used for text elements."
        },
        "2": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others.",
          "correct": true
        },
        "3": {
          "text": "To set the alignment of the content within the element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 121,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'flex-grow' property in CSS Flexbox?",
      "answers": {
        "1": {
          "text": "To specify the size of the font used for text elements."
        },
        "2": {
          "text": "To determine the flexibility of a flex item in relation to the other flex items in the container.",
          "correct": true
        },
        "3": {
          "text": "To set the alignment of the content within the element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 122,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'grid-template-columns' property in CSS Grid Layout?",
      "answers": {
        "1": {
          "text": "To specify the alignment of the content within the grid container."
        },
        "2": {
          "text": "To define the number and size of the columns in the grid layout.",
          "correct": true
        },
        "3": {
          "text": "To control the spacing between grid items."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 123,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'animation' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others."
        },
        "2": {
          "text": "To control the animation of an element, such as its movement, rotation, or scaling.",
          "correct": true
        },
        "3": {
          "text": "To set the alignment of the content within the element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 124,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'clip-path' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the size of the font used for text elements."
        },
        "2": {
          "text": "To define a clipping region for an element, limiting the visible portion of the element.",
          "correct": true
        },
        "3": {
          "text": "To set the alignment of the content within the element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 125,
      "topic": "CSS",
      "level": "Easy",
      "question": "What does the 'display' property in CSS control?",
      "answers": {
        "1": {
          "text": "The color of the text."
        },
        "2": {
          "text": "The type of layout used for an element.",
          "correct": true
        },
        "3": {
          "text": "The font size of the text."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 126,
      "topic": "CSS",
      "level": "Easy",
      "question": "Which CSS property is used to set the background color of an element?",
      "answers": {
        "1": {
          "text": "color"
        },
        "2": {
          "text": "background-color",
          "correct": true
        },
        "3": {
          "text": "text-color"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 127,
      "topic": "CSS",
      "level": "Medium",
      "question": "What does the 'float' property in CSS do?",
      "answers": {
        "1": {
          "text": "It positions an element to the left or right of its container, allowing content to flow around it.",
          "correct": true
        },
        "2": {
          "text": "It animates an element's appearance."
        },
        "3": {
          "text": "It applies a 3D transformation to an element."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 128,
      "topic": "CSS",
      "level": "Medium",
      "question": "What is the purpose of the 'position' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the size of the font used for text elements."
        },
        "2": {
          "text": "To define the order of the elements in the document flow."
        },
        "3": {
          "text": "To control the positioning method of an element within its containing element or the document.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 129,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'transform' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others."
        },
        "2": {
          "text": "To apply 2D or 3D transformations to an element, such as scaling, rotating, or skewing it.",
          "correct": true
        },
        "3": {
          "text": "To control the animation of an element, such as its movement, rotation, or scaling."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 130,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'box-shadow' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the size of the font used for text elements."
        },
        "2": {
          "text": "To apply a shadow effect to an element's box, such as its border or background.",
          "correct": true
        },
        "3": {
          "text": "To define a clipping region for an element, limiting the visible portion of the element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 131,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'overflow' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others."
        },
        "2": {
          "text": "To control how content that is too large to fit in an element is handled.",
          "correct": true
        },
        "3": {
          "text": "To control the animation of an element, such as its movement, rotation, or scaling."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 132,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'transition' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others."
        },
        "2": {
          "text": "To apply smooth transitions between different property values over a specified duration.",
          "correct": true
        },
        "3": {
          "text": "To control the animation of an element, such as its movement, rotation, or scaling."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 353,
      "topic": "CSS",
      "level": "Easy",
      "question": "What does the 'margin' property in CSS control?",
      "answers": {
        "1": {
          "text": "The space between the border and the content of an element.",
          "correct": true
        },
        "2": {
          "text": "The color of the text."
        },
        "3": {
          "text": "The size of the font used for text elements."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 354,
      "topic": "CSS",
      "level": "Easy",
      "question": "Which CSS property is used to set the font size of an element?",
      "answers": {
        "1": {
          "text": "font-style"
        },
        "2": {
          "text": "font-size",
          "correct": true
        },
        "3": {
          "text": "font-weight"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 355,
      "topic": "CSS",
      "level": "Medium",
      "question": "What does the 'flex-direction' property in CSS Flexbox control?",
      "answers": {
        "1": {
          "text": "The order of the flex items in the flex container."
        },
        "2": {
          "text": "The direction in which the flex items are laid out in the flex container.",
          "correct": true
        },
        "3": {
          "text": "The alignment of the flex items along the main axis."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 356,
      "topic": "CSS",
      "level": "Medium",
      "question": "What is the purpose of the 'position: relative;' property in CSS?",
      "answers": {
        "1": {
          "text": "To position an element relative to its parent element."
        },
        "2": {
          "text": "To position an element relative to the document's viewport."
        },
        "3": {
          "text": "To position an element relative to its normal position in the document flow.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 357,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'justify-content' property in CSS Flexbox?",
      "answers": {
        "1": {
          "text": "To control the alignment of the flex items along the cross axis."
        },
        "2": {
          "text": "To specify the order of the flex items in the flex container."
        },
        "3": {
          "text": "To align the flex items along the main axis.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 358,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'grid-template-rows' property in CSS Grid Layout?",
      "answers": {
        "1": {
          "text": "To define the number and size of the rows in the grid layout.",
          "correct": true
        },
        "2": {
          "text": "To specify the order of the grid items in the grid container."
        },
        "3": {
          "text": "To control the spacing between grid items."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 359,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'opacity' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others."
        },
        "2": {
          "text": "To control the animation of an element, such as its movement, rotation, or scaling."
        },
        "3": {
          "text": "To specify the transparency level of an element.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 360,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'backface-visibility' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others."
        },
        "2": {
          "text": "To control the visibility of an element's back face in 3D space.",
          "correct": true
        },
        "3": {
          "text": "To control the animation of an element, such as its movement, rotation, or scaling."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 133,
      "topic": "CSS",
      "level": "Easy",
      "question": "What does the 'font-family' property in CSS specify?",
      "answers": {
        "1": {
          "text": "The font size of the text."
        },
        "2": {
          "text": "The typeface or font family used for the text content.",
          "correct": true
        },
        "3": {
          "text": "The color of the text."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 134,
      "topic": "CSS",
      "level": "Easy",
      "question": "What does the 'margin' property in CSS control?",
      "answers": {
        "1": {
          "text": "The spacing between the border and the content inside an element."
        },
        "2": {
          "text": "The spacing between elements."
        },
        "3": {
          "text": "The spacing outside an element's border.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 135,
      "topic": "CSS",
      "level": "Medium",
      "question": "What is the purpose of the 'position: relative' property in CSS?",
      "answers": {
        "1": {
          "text": "To position an element relative to its containing element."
        },
        "2": {
          "text": "To position an element relative to the viewport.",
          "correct": true
        },
        "3": {
          "text": "To position an element absolutely within its containing element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 136,
      "topic": "CSS",
      "level": "Medium",
      "question": "What is the purpose of the 'flex-direction' property in CSS Flexbox?",
      "answers": {
        "1": {
          "text": "To specify the direction of the flex container's main axis.",
          "correct": true
        },
        "2": {
          "text": "To specify the order of the flex items."
        },
        "3": {
          "text": "To control the size of the flex items."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 137,
      "topic": "CSS",
      "level": "Hard",
      "question": "What does the 'filter' property in CSS do?",
      "answers": {
        "1": {
          "text": "To control the visibility of an element."
        },
        "2": {
          "text": "To apply graphical effects like blur or color adjustments to an element's content.",
          "correct": true
        },
        "3": {
          "text": "To adjust the size of an element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 138,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'backface-visibility' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify whether an element should be visible or hidden."
        },
        "2": {
          "text": "To control the visibility of the back face of a 3D-transformed element.",
          "correct": true
        },
        "3": {
          "text": "To control the stacking order of elements."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 139,
      "topic": "CSS",
      "level": "Hard",
      "question": "What does the 'counter-increment' property in CSS do?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements in the document flow."
        },
        "2": {
          "text": "To create a counter that is incremented each time the element is displayed.",
          "correct": true
        },
        "3": {
          "text": "To control the positioning method of an element within its containing element or the document."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 140,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'will-change' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the order of the elements along the z-axis, determining which elements overlap others."
        },
        "2": {
          "text": "To indicate to the browser that an element's property is likely to change, allowing the browser to optimize rendering performance.",
          "correct": true
        },
        "3": {
          "text": "To control the animation of an element, such as its movement, rotation, or scaling."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 141,
      "topic": "CSS",
      "level": "Easy",
      "question": "What is the purpose of the 'padding' property in CSS?",
      "answers": {
        "1": {
          "text": "To specify the color of the text."
        },
        "2": {
          "text": "To add space inside an element's border.",
          "correct": true
        },
        "3": {
          "text": "To control the spacing between elements."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 142,
      "topic": "CSS",
      "level": "Easy",
      "question": "Which CSS property is used to set the font size of an element?",
      "answers": {
        "1": {
          "text": "font-size",
          "correct": true
        },
        "2": {
          "text": "text-size"
        },
        "3": {
          "text": "size"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 143,
      "topic": "CSS",
      "level": "Medium",
      "question": "What is the purpose of the 'box-sizing: border-box' property in CSS?",
      "answers": {
        "1": {
          "text": "To include the padding and border in the element's total width and height.",
          "correct": true
        },
        "2": {
          "text": "To exclude the padding and border from the element's total width and height."
        },
        "3": {
          "text": "To specify the order of the elements in the document flow."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 144,
      "topic": "CSS",
      "level": "Medium",
      "question": "What does the 'visibility' property in CSS control?",
      "answers": {
        "1": {
          "text": "The positioning method of an element within its containing element or the document."
        },
        "2": {
          "text": "Whether an element is visible or hidden in the layout.",
          "correct": true
        },
        "3": {
          "text": "The color of the text."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 145,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'pointer-events' property in CSS?",
      "answers": {
        "1": {
          "text": "To control the visibility of an element."
        },
        "2": {
          "text": "To specify whether an element should be visible or hidden."
        },
        "3": {
          "text": "To control whether an element can be the target of pointer events, such as mouse clicks and hover.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 146,
      "topic": "CSS",
      "level": "Hard",
      "question": "What does the 'opacity' property in CSS control?",
      "answers": {
        "1": {
          "text": "The font size of the text."
        },
        "2": {
          "text": "The visibility of an element.",
          "correct": false
        },
        "3": {
          "text": "The transparency level of an element.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 147,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'perspective' property in CSS?",
      "answers": {
        "1": {
          "text": "To control the stacking order of elements."
        },
        "2": {
          "text": "To define the perspective from which a 3D-transformed element is viewed.",
          "correct": true
        },
        "3": {
          "text": "To create a shadow effect for an element's box."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 148,
      "topic": "CSS",
      "level": "Hard",
      "question": "What is the purpose of the 'column-count' property in CSS?",
      "answers": {
        "1": {
          "text": "To control the number of columns an element is divided into."
        },
        "2": {
          "text": "To specify the order of the elements in the document flow."
        },
        "3": {
          "text": "To specify the number of columns in a multi-column layout.",
          "correct": true
        }
      },
      "correct_answer": 3
    }
  ],
  "SCSS": [
    {
      "id": 149,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is SCSS?",
      "answers": {
        "1": {
          "text": "A programming language.",
          "correct": false
        },
        "2": {
          "text": "A syntax extension of CSS that uses curly braces and semicolons, similar to CSS.",
          "correct": false
        },
        "3": {
          "text": "A superset of CSS that adds features like variables, nesting, and mixins, with a syntax similar to CSS.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 150,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is a mixin in SCSS?",
      "answers": {
        "1": {
          "text": "A function that returns a value.",
          "correct": false
        },
        "2": {
          "text": "A reusable group of CSS declarations that can be included in other CSS rules.",
          "correct": true
        },
        "3": {
          "text": "A variable that can hold multiple values."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 151,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is nesting in SCSS?",
      "answers": {
        "1": {
          "text": "A way to group related CSS rules together.",
          "correct": false
        },
        "2": {
          "text": "A method for organizing CSS rules within the document hierarchy, similar to HTML structure.",
          "correct": true
        },
        "3": {
          "text": "A technique for applying multiple CSS properties to a single element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 152,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is a variable in SCSS?",
      "answers": {
        "1": {
          "text": "A value that cannot be changed once it is set.",
          "correct": false
        },
        "2": {
          "text": "A name that represents a value and can be reused throughout the stylesheet.",
          "correct": true
        },
        "3": {
          "text": "A function that returns a value."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 153,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'extend' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To import styles from another SCSS file into the current file."
        },
        "2": {
          "text": "To concatenate multiple strings together."
        },
        "3": {
          "text": "To share a set of CSS properties and selectors between two different selectors, creating a relationship similar to inheritance.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 154,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the '@import' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images, fonts, or other stylesheets."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file.",
          "correct": true
        },
        "3": {
          "text": "To define a mixin that can be included in other SCSS rules."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 155,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is interpolation in SCSS?",
      "answers": {
        "1": {
          "text": "A technique for combining multiple CSS properties into a single rule."
        },
        "2": {
          "text": "A method for inserting the value of a variable or expression into a string.",
          "correct": true
        },
        "3": {
          "text": "A way to group related CSS rules together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 156,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'map' data type in SCSS?",
      "answers": {
        "1": {
          "text": "To store a list of values."
        },
        "2": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript.",
          "correct": true
        },
        "3": {
          "text": "To group related CSS rules together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 157,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is the file extension for SCSS files?",
      "answers": {
        "1": {
          "text": ".css"
        },
        "2": {
          "text": ".sass"
        },
        "3": {
          "text": ".scss",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 158,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is the purpose of the 'variable' in SCSS?",
      "answers": {
        "1": {
          "text": "To store values that can be reused throughout the stylesheet.",
          "correct": true
        },
        "2": {
          "text": "To define a mixin that can be included in other SCSS rules."
        },
        "3": {
          "text": "To import styles from another SCSS file into the current file."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 159,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the difference between SCSS and Sass syntax?",
      "answers": {
        "1": {
          "text": "There is no difference, they are two different names for the same thing."
        },
        "2": {
          "text": "SCSS uses curly braces and semicolons, similar to CSS, while Sass uses indentation and line breaks.",
          "correct": true
        },
        "3": {
          "text": "SCSS is older and no longer used, while Sass is the current standard syntax for Sass files."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 160,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is a mixin in SCSS?",
      "answers": {
        "1": {
          "text": "A function that returns a value."
        },
        "2": {
          "text": "A reusable group of CSS declarations that can be included in other CSS rules.",
          "correct": true
        },
        "3": {
          "text": "A variable that can hold multiple values."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 161,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'placeholder' selector in SCSS?",
      "answers": {
        "1": {
          "text": "To define a style that can be reused throughout the stylesheet."
        },
        "2": {
          "text": "To target elements that match a specific pattern or condition."
        },
        "3": {
          "text": "To define a style that is not output in the final CSS unless it is extended by a selector.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 162,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'if' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To apply conditional logic to CSS rules."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file."
        },
        "3": {
          "text": "To conditionally output CSS based on a specified condition.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 163,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What does the 'parent selector' (&) represent in SCSS?",
      "answers": {
        "1": {
          "text": "The root element of the document."
        },
        "2": {
          "text": "The direct parent of the current element."
        },
        "3": {
          "text": "The current selector or the parent selector if nested within another selector.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 164,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'each' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To iterate over a list of values and apply a mixin to each value."
        },
        "2": {
          "text": "To create a loop that generates CSS based on a specified condition."
        },
        "3": {
          "text": "To iterate over a list or map of values and perform a specified action for each item.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 165,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is a nested rule in SCSS?",
      "answers": {
        "1": {
          "text": "A rule that contains multiple selectors."
        },
        "2": {
          "text": "A rule that is defined inside another rule, inheriting its scope and specificity.",
          "correct": true
        },
        "3": {
          "text": "A rule that applies to elements nested deeply within the DOM tree."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 166,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is the purpose of the 'mixin' in SCSS?",
      "answers": {
        "1": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript."
        },
        "2": {
          "text": "To create a reusable group of CSS declarations that can be included in other CSS rules.",
          "correct": true
        },
        "3": {
          "text": "To import styles from another SCSS file into the current file."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 167,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the 'import' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file.",
          "correct": true
        },
        "3": {
          "text": "To define a mixin that can be included in other SCSS rules."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 168,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the 'extend' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To concatenate multiple strings together."
        },
        "3": {
          "text": "To share a set of CSS properties and selectors between two different selectors, creating a relationship similar to inheritance.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 169,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'placeholder' selector in SCSS?",
      "answers": {
        "1": {
          "text": "To define a style that is not output in the final CSS unless it is extended by a selector.",
          "correct": true
        },
        "2": {
          "text": "To target elements that match a specific pattern or condition."
        },
        "3": {
          "text": "To define a style that can be reused throughout the stylesheet."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 170,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'for' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To apply conditional logic to CSS rules."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file."
        },
        "3": {
          "text": "To create a loop that generates CSS based on a specified condition.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 171,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'map' data type in SCSS?",
      "answers": {
        "1": {
          "text": "To store a list of values."
        },
        "2": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript.",
          "correct": true
        },
        "3": {
          "text": "To group related CSS rules together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 172,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'function' in SCSS?",
      "answers": {
        "1": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript."
        },
        "2": {
          "text": "To create a reusable group of CSS declarations that can be included in other CSS rules."
        },
        "3": {
          "text": "To perform calculations or other operations and return a value that can be used in CSS.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 173,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What does SCSS stand for?",
      "answers": {
        "1": {
          "text": "Sassy Cascading Style Sheets",
          "correct": true
        },
        "2": {
          "text": "Style Cascading Style Sheets"
        },
        "3": {
          "text": "Simplified Cascading Style Sheets"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 174,
      "topic": "SCSS",
      "level": "Easy",
      "question": "Which of the following is a feature of SCSS?",
      "answers": {
        "1": {
          "text": "Indentation-based syntax"
        },
        "2": {
          "text": "Use of colons and semicolons",
          "correct": true
        },
        "3": {
          "text": "Automatic vendor prefixing"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 175,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the 'import' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file.",
          "correct": true
        },
        "3": {
          "text": "To define a mixin that can be included in other SCSS rules."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 176,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the 'extend' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To concatenate multiple strings together."
        },
        "3": {
          "text": "To share a set of CSS properties and selectors between two different selectors, creating a relationship similar to inheritance.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 177,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'placeholder' selector in SCSS?",
      "answers": {
        "1": {
          "text": "To define a style that is not output in the final CSS unless it is extended by a selector.",
          "correct": true
        },
        "2": {
          "text": "To target elements that match a specific pattern or condition."
        },
        "3": {
          "text": "To define a style that can be reused throughout the stylesheet."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 178,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'for' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To apply conditional logic to CSS rules."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file."
        },
        "3": {
          "text": "To create a loop that generates CSS based on a specified condition.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 179,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'map' data type in SCSS?",
      "answers": {
        "1": {
          "text": "To store a list of values."
        },
        "2": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript.",
          "correct": true
        },
        "3": {
          "text": "To group related CSS rules together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 180,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'function' in SCSS?",
      "answers": {
        "1": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript."
        },
        "2": {
          "text": "To create a reusable group of CSS declarations that can be included in other CSS rules."
        },
        "3": {
          "text": "To perform calculations or other operations and return a value that can be used in CSS.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 181,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is the difference between SCSS and Sass?",
      "answers": {
        "1": {
          "text": "SCSS is a newer version of Sass.",
          "correct": false
        },
        "2": {
          "text": "SCSS uses curly braces and semicolons, while Sass uses indentation and line breaks.",
          "correct": true
        },
        "3": {
          "text": "SCSS is a subset of Sass."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 182,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is the purpose of the 'mixin' in SCSS?",
      "answers": {
        "1": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript."
        },
        "2": {
          "text": "To create a reusable group of CSS declarations that can be included in other CSS rules.",
          "correct": true
        },
        "3": {
          "text": "To import styles from another SCSS file into the current file."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 183,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the 'extend' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To concatenate multiple strings together."
        },
        "3": {
          "text": "To share a set of CSS properties and selectors between two different selectors, creating a relationship similar to inheritance.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 184,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the 'import' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file.",
          "correct": true
        },
        "3": {
          "text": "To define a mixin that can be included in other SCSS rules."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 185,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'placeholder' selector in SCSS?",
      "answers": {
        "1": {
          "text": "To define a style that is not output in the final CSS unless it is extended by a selector.",
          "correct": true
        },
        "2": {
          "text": "To target elements that match a specific pattern or condition."
        },
        "3": {
          "text": "To define a style that can be reused throughout the stylesheet."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 186,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'for' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To apply conditional logic to CSS rules."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file."
        },
        "3": {
          "text": "To create a loop that generates CSS based on a specified condition.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 187,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'map' data type in SCSS?",
      "answers": {
        "1": {
          "text": "To store a list of values."
        },
        "2": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript.",
          "correct": true
        },
        "3": {
          "text": "To group related CSS rules together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 188,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'function' in SCSS?",
      "answers": {
        "1": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript."
        },
        "2": {
          "text": "To create a reusable group of CSS declarations that can be included in other CSS rules."
        },
        "3": {
          "text": "To perform calculations or other operations and return a value that can be used in CSS.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 189,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What file extension is commonly used for Sass files?",
      "answers": {
        "1": {
          "text": ".scss",
          "correct": true
        },
        "2": {
          "text": ".css"
        },
        "3": {
          "text": ".sass"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 190,
      "topic": "SCSS",
      "level": "Easy",
      "question": "What is the purpose of a Sass mixin?",
      "answers": {
        "1": {
          "text": "To store a list of values."
        },
        "2": {
          "text": "To create a reusable group of CSS declarations that can be included in other CSS rules.",
          "correct": true
        },
        "3": {
          "text": "To import styles from another SCSS file into the current file."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 191,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the 'extend' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To concatenate multiple strings together."
        },
        "3": {
          "text": "To share a set of CSS properties and selectors between two different selectors, creating a relationship similar to inheritance.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 192,
      "topic": "SCSS",
      "level": "Medium",
      "question": "What is the purpose of the '@import' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To include external resources, such as images or fonts, into the current file."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file.",
          "correct": true
        },
        "3": {
          "text": "To define a mixin that can be included in other SCSS rules."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 193,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'placeholder' selector in SCSS?",
      "answers": {
        "1": {
          "text": "To define a style that is not output in the final CSS unless it is extended by a selector.",
          "correct": true
        },
        "2": {
          "text": "To target elements that match a specific pattern or condition."
        },
        "3": {
          "text": "To define a style that can be reused throughout the stylesheet."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 194,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'for' directive in SCSS?",
      "answers": {
        "1": {
          "text": "To apply conditional logic to CSS rules."
        },
        "2": {
          "text": "To import styles from another SCSS file into the current file."
        },
        "3": {
          "text": "To create a loop that generates CSS based on a specified condition.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 195,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'map' data type in SCSS?",
      "answers": {
        "1": {
          "text": "To store a list of values."
        },
        "2": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript.",
          "correct": true
        },
        "3": {
          "text": "To group related CSS rules together."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 196,
      "topic": "SCSS",
      "level": "Hard",
      "question": "What is the purpose of the 'function' in SCSS?",
      "answers": {
        "1": {
          "text": "To define a collection of key-value pairs, similar to an object in JavaScript."
        },
        "2": {
          "text": "To create a reusable group of CSS declarations that can be included in other CSS rules."
        },
        "3": {
          "text": "To perform calculations or other operations and return a value that can be used in CSS.",
          "correct": true
        }
      },
      "correct_answer": 3
    }
  ],
  "TypeScript": [
    {
      "id": 361,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What are the main benefits of using TypeScript?",
      "answers": {
        "1": {
          "text": "Improved performance of web applications."
        },
        "2": {
          "text": "Enhanced security against web vulnerabilities."
        },
        "3": {
          "text": "Static type checking, better tooling support, and improved code maintainability.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 362,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is a type declaration file in TypeScript?",
      "answers": {
        "1": {
          "text": "A file that declares variables with specific types."
        },
        "2": {
          "text": "A file that contains metadata about the types used in other TypeScript files.",
          "correct": true
        },
        "3": {
          "text": "A file that includes external JavaScript libraries."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 363,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the 'any' type in TypeScript?",
      "answers": {
        "1": {
          "text": "A type that represents any value, allowing it to be assigned to variables of any type.",
          "correct": true
        },
        "2": {
          "text": "A reserved keyword indicating an anonymous function."
        },
        "3": {
          "text": "A data type used for asynchronous operations."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 364,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is a decorator in TypeScript?",
      "answers": {
        "1": {
          "text": "A function that modifies the behavior of another function or class when it is declared.",
          "correct": true
        },
        "2": {
          "text": "A syntax used to define types for function parameters."
        },
        "3": {
          "text": "A reserved keyword for defining private class properties."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 365,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of type assertion in TypeScript?",
      "answers": {
        "1": {
          "text": "To perform type checking at runtime."
        },
        "2": {
          "text": "To explicitly specify the type of a variable when the TypeScript compiler cannot infer it.",
          "correct": true
        },
        "3": {
          "text": "To enforce strict type constraints on function parameters."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 366,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the 'never' type in TypeScript?",
      "answers": {
        "1": {
          "text": "A type that represents null or undefined."
        },
        "2": {
          "text": "A reserved keyword indicating an infinite loop."
        },
        "3": {
          "text": "A type that represents values that will never occur.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 367,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of type guards in TypeScript?",
      "answers": {
        "1": {
          "text": "To restrict access to certain properties of an object."
        },
        "2": {
          "text": "To enforce strict type checking on function return values."
        },
        "3": {
          "text": "To narrow down the type of a variable within a conditional block.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 368,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is TypeScript?",
      "answers": {
        "1": {
          "text": "A superset of JavaScript that adds optional static typing.",
          "correct": true
        },
        "2": {
          "text": "A framework for building web applications."
        },
        "3": {
          "text": "A database management system."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 369,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What extension do TypeScript files use?",
      "answers": {
        "1": {
          "text": ".js"
        },
        "2": {
          "text": ".ts",
          "correct": true
        },
        "3": {
          "text": ".css"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 370,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the main benefit of using TypeScript?",
      "answers": {
        "1": {
          "text": "It improves the performance of web applications."
        },
        "2": {
          "text": "It provides optional static typing and better tooling support, leading to fewer errors and easier maintenance.",
          "correct": true
        },
        "3": {
          "text": "It allows you to write server-side code in JavaScript."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 371,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What are interfaces in TypeScript?",
      "answers": {
        "1": {
          "text": "A way to extend a class with additional properties and methods."
        },
        "2": {
          "text": "A data structure used to store key-value pairs."
        },
        "3": {
          "text": "A syntactical contract that an entity should conform to, specifying a set of properties and methods.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 372,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is a generic type in TypeScript?",
      "answers": {
        "1": {
          "text": "A type that is defined for a specific class."
        },
        "2": {
          "text": "A type that can be used for any data type, making it more flexible and reusable.",
          "correct": true
        },
        "3": {
          "text": "A type that is inferred by the TypeScript compiler based on usage."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 373,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the 'never' type in TypeScript?",
      "answers": {
        "1": {
          "text": "A type that represents a value that will never occur.",
          "correct": true
        },
        "2": {
          "text": "A type that can be used to define a function that never returns a value."
        },
        "3": {
          "text": "A type that indicates that a variable can hold any type of value."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 374,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the 'keyof' operator used for in TypeScript?",
      "answers": {
        "1": {
          "text": "To define a new type by combining multiple existing types."
        },
        "2": {
          "text": "To iterate over the keys of an object and return a union of string literal types.",
          "correct": true
        },
        "3": {
          "text": "To check if two types are compatible."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 375,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of the 'readonly' modifier in TypeScript?",
      "answers": {
        "1": {
          "text": "To prevent changes to a variable or property after it has been initialized.",
          "correct": true
        },
        "2": {
          "text": "To specify that a function should not have a return value."
        },
        "3": {
          "text": "To indicate that a class cannot be extended."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 376,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is TypeScript?",
      "answers": {
        "1": {
          "text": "A JavaScript framework."
        },
        "2": {
          "text": "A superset of JavaScript that adds static types and other features.",
          "correct": true
        },
        "3": {
          "text": "A library for building user interfaces."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 377,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the purpose of static typing in TypeScript?",
      "answers": {
        "1": {
          "text": "To make JavaScript code run faster."
        },
        "2": {
          "text": "To catch errors early in the development process and improve code quality.",
          "correct": true
        },
        "3": {
          "text": "To make JavaScript code more concise."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 378,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What are interfaces in TypeScript?",
      "answers": {
        "1": {
          "text": "A way to define object types.",
          "correct": true
        },
        "2": {
          "text": "A tool for organizing CSS styles."
        },
        "3": {
          "text": "A method for importing external libraries."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 379,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the purpose of type annotations in TypeScript?",
      "answers": {
        "1": {
          "text": "To specify the return type of a function."
        },
        "2": {
          "text": "To provide additional information about variables and function parameters, such as their types.",
          "correct": true
        },
        "3": {
          "text": "To import external libraries into a TypeScript project."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 380,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What are generics in TypeScript?",
      "answers": {
        "1": {
          "text": "A way to define custom data types."
        },
        "2": {
          "text": "A feature that allows functions and classes to work with any data type.",
          "correct": true
        },
        "3": {
          "text": "A method for creating reusable components in React."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 381,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is a tuple in TypeScript?",
      "answers": {
        "1": {
          "text": "An array with a fixed number of elements where each element has a specific type.",
          "correct": true
        },
        "2": {
          "text": "A data structure that stores key-value pairs."
        },
        "3": {
          "text": "A function that returns a value."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 382,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of 'strictNullChecks' compiler option in TypeScript?",
      "answers": {
        "1": {
          "text": "To enable strict type checking for null values."
        },
        "2": {
          "text": "To prevent null and undefined values from being assigned to variables unless explicitly specified.",
          "correct": true
        },
        "3": {
          "text": "To allow null values to be used in any context."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 383,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the difference between 'any' and 'unknown' types in TypeScript?",
      "answers": {
        "1": {
          "text": "'any' represents any type and allows any operations on it, while 'unknown' represents a value of unknown type that must be checked before use.",
          "correct": true
        },
        "2": {
          "text": "'any' represents a value of unknown type that must be checked before use, while 'unknown' represents any type and allows any operations on it."
        },
        "3": {
          "text": "'any' and 'unknown' types are identical and can be used interchangeably."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 197,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the TypeScript compiler called?",
      "answers": {
        "1": {
          "text": "TSC",
          "correct": true
        },
        "2": {
          "text": "TSP"
        },
        "3": {
          "text": "TSCompiler"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 198,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What keyword is used to define a variable with a specific type in TypeScript?",
      "answers": {
        "1": {
          "text": "var"
        },
        "2": {
          "text": "let"
        },
        "3": {
          "text": "const"
        },
        "4": {
          "text": "All of the above"
        },
        "5": {
          "text": "None of the above",
          "correct": true
        }
      },
      "correct_answer": 5
    },
    {
      "id": 199,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What does the 'readonly' modifier do in TypeScript?",
      "answers": {
        "1": {
          "text": "It makes a property writable."
        },
        "2": {
          "text": "It makes a property read-only.",
          "correct": true
        },
        "3": {
          "text": "It specifies that a property can only be accessed by a specific class."
        },
        "4": {
          "text": "It specifies that a property can only be accessed by a specific instance of a class."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 200,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the purpose of the 'never' type in TypeScript?",
      "answers": {
        "1": {
          "text": "To represent a value that will never occur."
        },
        "2": {
          "text": "To represent a function that will never return a value.",
          "correct": true
        },
        "3": {
          "text": "To represent a value that can be of any type."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 201,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the 'keyof' keyword used for in TypeScript?",
      "answers": {
        "1": {
          "text": "To define a new type that represents all possible keys of an object."
        },
        "2": {
          "text": "To access the values of an object using its keys."
        },
        "3": {
          "text": "To create a union type from the keys of an object.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 202,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What does the 'as' keyword do in TypeScript?",
      "answers": {
        "1": {
          "text": "It is used to declare variables."
        },
        "2": {
          "text": "It is used to cast one type to another.",
          "correct": true
        },
        "3": {
          "text": "It is used to create aliases for types."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 203,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of the 'namespace' keyword in TypeScript?",
      "answers": {
        "1": {
          "text": "To define a new type."
        },
        "2": {
          "text": "To create a module that encapsulates a set of related functionality.",
          "correct": true
        },
        "3": {
          "text": "To import external modules into a TypeScript file."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 204,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the difference between 'interface' and 'type' in TypeScript?",
      "answers": {
        "1": {
          "text": "'interface' is used to define object shapes, while 'type' can be used to define any type, including primitive types and unions.",
          "correct": true
        },
        "2": {
          "text": "'interface' is used to define any type, while 'type' is used only for defining object shapes."
        },
        "3": {
          "text": "'interface' and 'type' are interchangeable and can be used in the same way."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 205,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is a type assertion in TypeScript?",
      "answers": {
        "1": {
          "text": "It is a way to declare variables with specific types."
        },
        "2": {
          "text": "It is a way to override the inferred type of a variable.",
          "correct": true
        },
        "3": {
          "text": "It is a way to define interfaces for objects."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 206,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the purpose of the 'interface' keyword in TypeScript?",
      "answers": {
        "1": {
          "text": "To define a new class."
        },
        "2": {
          "text": "To define a new type that represents object shapes.",
          "correct": true
        },
        "3": {
          "text": "To declare variables with specific types."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 207,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the 'readonly' modifier used for in TypeScript?",
      "answers": {
        "1": {
          "text": "To make a property writable."
        },
        "2": {
          "text": "To make a property read-only.",
          "correct": true
        },
        "3": {
          "text": "To specify that a property can only be accessed by a specific class."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 208,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What are union types in TypeScript?",
      "answers": {
        "1": {
          "text": "A way to combine multiple types into one.",
          "correct": true
        },
        "2": {
          "text": "A way to define the type of any variable."
        },
        "3": {
          "text": "A way to create aliases for types."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 209,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the 'keyof' keyword used for in TypeScript?",
      "answers": {
        "1": {
          "text": "To define a new type that represents all possible keys of an object."
        },
        "2": {
          "text": "To access the values of an object using its keys."
        },
        "3": {
          "text": "To create a union type from the keys of an object.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 210,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What does the 'as' keyword do in TypeScript?",
      "answers": {
        "1": {
          "text": "It is used to declare variables."
        },
        "2": {
          "text": "It is used to cast one type to another.",
          "correct": true
        },
        "3": {
          "text": "It is used to create aliases for types."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 211,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of the 'namespace' keyword in TypeScript?",
      "answers": {
        "1": {
          "text": "To define a new type."
        },
        "2": {
          "text": "To create a module that encapsulates a set of related functionality.",
          "correct": true
        },
        "3": {
          "text": "To import external modules into a TypeScript file."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 212,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the difference between 'interface' and 'type' in TypeScript?",
      "answers": {
        "1": {
          "text": "'interface' is used to define object shapes, while 'type' can be used to define any type, including primitive types and unions.",
          "correct": true
        },
        "2": {
          "text": "'interface' is used to define any type, while 'type' is used only for defining object shapes."
        },
        "3": {
          "text": "'interface' and 'type' are interchangeable and can be used in the same way."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 213,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the file extension for TypeScript files?",
      "answers": {
        "1": {
          "text": ".js"
        },
        "2": {
          "text": ".ts",
          "correct": true
        },
        "3": {
          "text": ".typescript"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 214,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the purpose of TypeScript's 'strict' mode?",
      "answers": {
        "1": {
          "text": "To enable strict syntax checking."
        },
        "2": {
          "text": "To enable strict type checking and additional syntax checks.",
          "correct": true
        },
        "3": {
          "text": "To allow any type of syntax and type usage."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 215,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the difference between 'interface' and 'class' in TypeScript?",
      "answers": {
        "1": {
          "text": "'interface' can only define the shape of an object, while 'class' can define both shape and behavior.",
          "correct": true
        },
        "2": {
          "text": "'interface' can define both shape and behavior, while 'class' can only define the shape of an object."
        },
        "3": {
          "text": "'interface' and 'class' are interchangeable and can be used in the same way."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 216,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What are access modifiers in TypeScript?",
      "answers": {
        "1": {
          "text": "Keywords used to specify the visibility of class members.",
          "correct": true
        },
        "2": {
          "text": "Keywords used to define the type of class members."
        },
        "3": {
          "text": "Keywords used to specify the type of access to class methods."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 217,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of TypeScript's 'namespace' feature?",
      "answers": {
        "1": {
          "text": "To create separate scopes for variables and functions within a module."
        },
        "2": {
          "text": "To organize code into logical groups and prevent naming collisions.",
          "correct": true
        },
        "3": {
          "text": "To restrict access to certain parts of a module from external code."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 218,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is a module in TypeScript?",
      "answers": {
        "1": {
          "text": "A JavaScript library."
        },
        "2": {
          "text": "A file containing TypeScript code that can be imported and exported.",
          "correct": true
        },
        "3": {
          "text": "A class that encapsulates data and behavior."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 219,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of TypeScript's 'abstract' keyword?",
      "answers": {
        "1": {
          "text": "To declare a class that cannot be instantiated on its own."
        },
        "2": {
          "text": "To define a method that must be implemented by any subclass.",
          "correct": true
        },
        "3": {
          "text": "To specify that a method or class can only be accessed from within the same module."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 220,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the 'infer' keyword used for in TypeScript?",
      "answers": {
        "1": {
          "text": "To declare a new type."
        },
        "2": {
          "text": "To infer the type of a variable based on its usage.",
          "correct": true
        },
        "3": {
          "text": "To specify the return type of a function."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 221,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the primary goal of using TypeScript?",
      "answers": {
        "1": {
          "text": "To write JavaScript code faster."
        },
        "2": {
          "text": "To catch errors early during development and improve code quality.",
          "correct": true
        },
        "3": {
          "text": "To provide additional features for JavaScript runtime."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 222,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What tool is commonly used to compile TypeScript code into JavaScript?",
      "answers": {
        "1": {
          "text": "Node.js"
        },
        "2": {
          "text": "Webpack"
        },
        "3": {
          "text": "TypeScript Compiler (tsc)",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 223,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the purpose of 'type guards' in TypeScript?",
      "answers": {
        "1": {
          "text": "To restrict the type of a variable to a specific type."
        },
        "2": {
          "text": "To provide runtime checks to determine the type of a variable at runtime.",
          "correct": true
        },
        "3": {
          "text": "To define custom types for variables."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 224,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the difference between 'null' and 'undefined' in TypeScript?",
      "answers": {
        "1": {
          "text": "'null' represents the absence of a value, while 'undefined' indicates that a variable has not been assigned a value yet.",
          "correct": true
        },
        "2": {
          "text": "'null' indicates that a variable has not been assigned a value yet, while 'undefined' represents the absence of a value."
        },
        "3": {
          "text": "There is no difference between 'null' and 'undefined' in TypeScript."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 225,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of the 'never' type in TypeScript?",
      "answers": {
        "1": {
          "text": "To represent a value that will never occur."
        },
        "2": {
          "text": "To represent a function that will never return a value.",
          "correct": true
        },
        "3": {
          "text": "To represent a value that can be of any type."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 226,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What are ambient declarations in TypeScript?",
      "answers": {
        "1": {
          "text": "Declarations that define the structure of external libraries and APIs.",
          "correct": true
        },
        "2": {
          "text": "Declarations that define the structure of internal modules."
        },
        "3": {
          "text": "Declarations that define the structure of classes and interfaces."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 227,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of 'strictNullChecks' compiler option in TypeScript?",
      "answers": {
        "1": {
          "text": "To enable strict type checking for null values."
        },
        "2": {
          "text": "To prevent null and undefined values from being assigned to variables unless explicitly specified.",
          "correct": true
        },
        "3": {
          "text": "To allow null values to be used in any context."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 228,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is a 'declaration file' in TypeScript?",
      "answers": {
        "1": {
          "text": "A file that contains TypeScript code."
        },
        "2": {
          "text": "A file that declares the structure of existing JavaScript code for use in TypeScript.",
          "correct": true
        },
        "3": {
          "text": "A file that declares the structure of TypeScript modules."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 229,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the purpose of TypeScript's 'strict' mode?",
      "answers": {
        "1": {
          "text": "To enable strict syntax checking."
        },
        "2": {
          "text": "To enable strict type checking and additional syntax checks.",
          "correct": true
        },
        "3": {
          "text": "To allow any type of syntax and type usage."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 230,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the file extension for TypeScript files?",
      "answers": {
        "1": {
          "text": ".js"
        },
        "2": {
          "text": ".ts",
          "correct": true
        },
        "3": {
          "text": ".typescript"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 231,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the 'keyof' keyword used for in TypeScript?",
      "answers": {
        "1": {
          "text": "To define a new type that represents all possible keys of an object."
        },
        "2": {
          "text": "To access the values of an object using its keys."
        },
        "3": {
          "text": "To create a union type from the keys of an object.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 232,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the difference between 'interface' and 'type' in TypeScript?",
      "answers": {
        "1": {
          "text": "'interface' is used to define object shapes, while 'type' can be used to define any type, including primitive types and unions.",
          "correct": true
        },
        "2": {
          "text": "'interface' is used to define any type, while 'type' is used only for defining object shapes."
        },
        "3": {
          "text": "'interface' and 'type' are interchangeable and can be used in the same way."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 233,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of TypeScript's 'namespace' feature?",
      "answers": {
        "1": {
          "text": "To create separate scopes for variables and functions within a module."
        },
        "2": {
          "text": "To organize code into logical groups and prevent naming collisions.",
          "correct": true
        },
        "3": {
          "text": "To restrict access to certain parts of a module from external code."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 234,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is a module in TypeScript?",
      "answers": {
        "1": {
          "text": "A JavaScript library."
        },
        "2": {
          "text": "A file containing TypeScript code that can be imported and exported.",
          "correct": true
        },
        "3": {
          "text": "A class that encapsulates data and behavior."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 235,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of TypeScript's 'abstract' keyword?",
      "answers": {
        "1": {
          "text": "To declare a class that cannot be instantiated on its own."
        },
        "2": {
          "text": "To define a method that must be implemented by any subclass.",
          "correct": true
        },
        "3": {
          "text": "To specify that a method or class can only be accessed from within the same module."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 236,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the 'infer' keyword used for in TypeScript?",
      "answers": {
        "1": {
          "text": "To declare a new type."
        },
        "2": {
          "text": "To infer the type of a variable based on its usage.",
          "correct": true
        },
        "3": {
          "text": "To specify the return type of a function."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 237,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What is the primary goal of using TypeScript?",
      "answers": {
        "1": {
          "text": "To write JavaScript code faster."
        },
        "2": {
          "text": "To catch errors early during development and improve code quality.",
          "correct": true
        },
        "3": {
          "text": "To provide additional features for JavaScript runtime."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 238,
      "topic": "TypeScript",
      "level": "Easy",
      "question": "What tool is commonly used to compile TypeScript code into JavaScript?",
      "answers": {
        "1": {
          "text": "Node.js"
        },
        "2": {
          "text": "Webpack"
        },
        "3": {
          "text": "TypeScript Compiler (tsc)",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 239,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the purpose of 'type guards' in TypeScript?",
      "answers": {
        "1": {
          "text": "To restrict the type of a variable to a specific type."
        },
        "2": {
          "text": "To provide runtime checks to determine the type of a variable at runtime.",
          "correct": true
        },
        "3": {
          "text": "To define custom types for variables."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 240,
      "topic": "TypeScript",
      "level": "Medium",
      "question": "What is the difference between 'null' and 'undefined' in TypeScript?",
      "answers": {
        "1": {
          "text": "'null' represents the absence of a value, while 'undefined' indicates that a variable has not been assigned a value yet.",
          "correct": true
        },
        "2": {
          "text": "'null' indicates that a variable has not been assigned a value yet, while 'undefined' represents the absence of a value."
        },
        "3": {
          "text": "There is no difference between 'null' and 'undefined' in TypeScript."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 241,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of the 'never' type in TypeScript?",
      "answers": {
        "1": {
          "text": "To represent a value that will never occur."
        },
        "2": {
          "text": "To represent a function that will never return a value.",
          "correct": true
        },
        "3": {
          "text": "To represent a value that can be of any type."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 242,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What are ambient declarations in TypeScript?",
      "answers": {
        "1": {
          "text": "Declarations that define the structure of external libraries and APIs.",
          "correct": true
        },
        "2": {
          "text": "Declarations that define the structure of internal modules."
        },
        "3": {
          "text": "Declarations that define the structure of classes and interfaces."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 243,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is the purpose of 'strictNullChecks' compiler option in TypeScript?",
      "answers": {
        "1": {
          "text": "To enable strict type checking for null values."
        },
        "2": {
          "text": "To prevent null and undefined values from being assigned to variables unless explicitly specified.",
          "correct": true
        },
        "3": {
          "text": "To allow null values to be used in any context."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 244,
      "topic": "TypeScript",
      "level": "Hard",
      "question": "What is a 'declaration file' in TypeScript?",
      "answers": {
        "1": {
          "text": "A file that contains TypeScript code."
        },
        "2": {
          "text": "A file that declares the structure of existing JavaScript code for use in TypeScript.",
          "correct": true
        },
        "3": {
          "text": "A file that declares the structure of TypeScript modules."
        }
      },
      "correct_answer": 2
    }
  ],
  "JavaScript": [
    {
      "id": 245,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the result of '5' + 3 in JavaScript?",
      "answers": {
        "1": {
          "text": "8"
        },
        "2": {
          "text": "53",
          "correct": true
        },
        "3": {
          "text": "NaN"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 246,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'typeof' operator return for an array in JavaScript?",
      "answers": {
        "1": {
          "text": "'array'"
        },
        "2": {
          "text": "'object'",
          "correct": true
        },
        "3": {
          "text": "'undefined'"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 247,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the 'prototype' property used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To set the prototype of an object."
        },
        "2": {
          "text": "To access the prototype of an object.",
          "correct": true
        },
        "3": {
          "text": "To define methods for an object."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 248,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is a closure in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that has access to its parent scope, even after the parent function has closed.",
          "correct": true
        },
        "2": {
          "text": "A function that is immediately invoked after its declaration."
        },
        "3": {
          "text": "A function that is defined inside another function."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 249,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the difference between '==' and '===' operators in JavaScript?",
      "answers": {
        "1": {
          "text": "'==' performs type coercion, while '===' does not.",
          "correct": true
        },
        "2": {
          "text": "'==' checks for equality of values, while '===' checks for equality of both values and types."
        },
        "3": {
          "text": "'==' is used for strict comparison, while '===' is used for loose comparison."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 250,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'this' keyword in JavaScript?",
      "answers": {
        "1": {
          "text": "To refer to the current function's prototype."
        },
        "2": {
          "text": "To refer to the global object."
        },
        "3": {
          "text": "To refer to the current execution context, such as an object or function.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 251,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the event loop in JavaScript?",
      "answers": {
        "1": {
          "text": "A loop that handles asynchronous events and callbacks in JavaScript.",
          "correct": true
        },
        "2": {
          "text": "A loop that executes JavaScript code line by line."
        },
        "3": {
          "text": "A loop that waits for user input in the browser."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 252,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a higher-order function in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that operates on arrays and returns a new array."
        },
        "2": {
          "text": "A function that accepts other functions as arguments or returns a function.",
          "correct": true
        },
        "3": {
          "text": "A function that has a higher precedence in execution order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 253,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'querySelector()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "It selects and returns the first element that matches a specified CSS selector.",
          "correct": true
        },
        "2": {
          "text": "It selects and returns all elements that match a specified CSS selector."
        },
        "3": {
          "text": "It selects and returns the last element that matches a specified CSS selector."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 254,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the purpose of the 'appendChild()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To remove a child element from its parent."
        },
        "2": {
          "text": "To add a new child element to the end of the specified parent element.",
          "correct": true
        },
        "3": {
          "text": "To replace a child element with a new element."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 255,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'let' and 'var' in JavaScript?",
      "answers": {
        "1": {
          "text": "'let' has block scope, while 'var' has function scope.",
          "correct": true
        },
        "2": {
          "text": "'var' has block scope, while 'let' has function scope."
        },
        "3": {
          "text": "There is no difference between 'let' and 'var'."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 256,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is an immediately-invoked function expression (IIFE) in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is automatically executed when the script loads."
        },
        "2": {
          "text": "A function that is defined inside another function and is executed immediately after its definition.",
          "correct": true
        },
        "3": {
          "text": "A function that is called immediately after it is defined, without being stored in a variable."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 257,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is event delegation in JavaScript?",
      "answers": {
        "1": {
          "text": "A technique for handling events by attaching a single event listener to a parent element that listens for events on its descendants.",
          "correct": true
        },
        "2": {
          "text": "A technique for dispatching custom events between different components."
        },
        "3": {
          "text": "A technique for triggering multiple events simultaneously."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 258,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'use strict' directive in JavaScript?",
      "answers": {
        "1": {
          "text": "A directive that enforces strict mode, which restricts certain actions and throws more exceptions.",
          "correct": true
        },
        "2": {
          "text": "A directive that allows loose mode, which enables additional features and optimizations."
        },
        "3": {
          "text": "A directive that specifies the use of ECMAScript 6 features."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 259,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is memoization in JavaScript?",
      "answers": {
        "1": {
          "text": "A technique for caching function results to improve performance by avoiding unnecessary computations.",
          "correct": true
        },
        "2": {
          "text": "A technique for compressing JavaScript files to reduce loading times."
        },
        "3": {
          "text": "A technique for optimizing the rendering of HTML elements."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 260,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What does the 'bind()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "It creates a shallow copy of an object."
        },
        "2": {
          "text": "It binds a function to a specified context, effectively setting the 'this' value.",
          "correct": true
        },
        "3": {
          "text": "It sorts the elements of an array in place."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 261,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the syntax for a single-line comment in JavaScript?",
      "answers": {
        "1": {
          "text": "// This is a comment"
        },
        "2": {
          "text": "/* This is a comment */"
        },
        "3": {
          "text": "# This is a comment"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 262,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'typeof' operator return for a function in JavaScript?",
      "answers": {
        "1": {
          "text": "'function'",
          "correct": true
        },
        "2": {
          "text": "'object'"
        },
        "3": {
          "text": "'undefined'"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 263,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is a callback function in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is called immediately after its declaration."
        },
        "2": {
          "text": "A function that is passed as an argument to another function and is executed after a certain event or task is completed.",
          "correct": true
        },
        "3": {
          "text": "A function that is defined inside another function and is executed immediately after its definition."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 264,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'map()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To remove elements from an array."
        },
        "2": {
          "text": "To iterate over each element of an array and return a new array with modified elements.",
          "correct": true
        },
        "3": {
          "text": "To add elements to the beginning of an array."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 265,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a promise in JavaScript?",
      "answers": {
        "1": {
          "text": "A guarantee that a function will be executed."
        },
        "2": {
          "text": "An object representing the eventual completion or failure of an asynchronous operation and its resulting value.",
          "correct": true
        },
        "3": {
          "text": "A function that executes a series of asynchronous tasks in sequence."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 266,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'async' keyword used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To define a function that returns a promise."
        },
        "2": {
          "text": "To specify that a function is asynchronous and will return a promise.",
          "correct": true
        },
        "3": {
          "text": "To execute a function asynchronously."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 267,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a generator function in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that generates random numbers."
        },
        "2": {
          "text": "A function that can be paused and resumed, yielding multiple values over time.",
          "correct": true
        },
        "3": {
          "text": "A function that generates HTML elements dynamically."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 268,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'includes()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To check if an array contains a specific element."
        },
        "2": {
          "text": "To add elements to an array."
        },
        "3": {
          "text": "To check if an array contains a specific element and return true or false.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 384,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the purpose of the 'slice()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To remove elements from an array."
        },
        "2": {
          "text": "To extract a section of an array and return a new array.",
          "correct": true
        },
        "3": {
          "text": "To add elements to the end of an array."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 385,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the output of 'typeof null' in JavaScript?",
      "answers": {
        "1": {
          "text": "'object'"
        },
        "2": {
          "text": "'null'"
        },
        "3": {
          "text": "'object'",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 386,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'reduce()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To add elements to an array."
        },
        "2": {
          "text": "To apply a function to each element of an array and reduce the array to a single value.",
          "correct": true
        },
        "3": {
          "text": "To remove elements from an array."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 387,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'window.onload' and 'document.onload' in JavaScript?",
      "answers": {
        "1": {
          "text": "'window.onload' fires when all elements on the page, including images and scripts, have finished loading.",
          "correct": true
        },
        "2": {
          "text": "'document.onload' fires when the HTML document has finished loading, but not necessarily all its dependent resources."
        },
        "3": {
          "text": "There is no difference between 'window.onload' and 'document.onload'."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 388,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'Object.defineProperty()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To define a new property directly on an object.",
          "correct": true
        },
        "2": {
          "text": "To remove a property from an object."
        },
        "3": {
          "text": "To retrieve the descriptor of a specified property."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 389,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'setTimeout()' function used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To execute a function after a specified number of milliseconds.",
          "correct": true
        },
        "2": {
          "text": "To execute a function repeatedly at specified intervals."
        },
        "3": {
          "text": "To delay the execution of a function until the current call stack is cleared."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 390,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a weakmap in JavaScript?",
      "answers": {
        "1": {
          "text": "A data structure used for mapping keys to values, where the keys are weakly referenced.",
          "correct": true
        },
        "2": {
          "text": "A map structure that only accepts weakly-typed values."
        },
        "3": {
          "text": "A map structure that does not support weak references."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 391,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'use strict' directive in JavaScript?",
      "answers": {
        "1": {
          "text": "A directive that enforces strict mode, which restricts certain actions and throws more exceptions.",
          "correct": true
        },
        "2": {
          "text": "A directive that allows loose mode, which enables additional features and optimizations."
        },
        "3": {
          "text": "A directive that specifies the use of ECMAScript 6 features."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 269,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the purpose of the 'concat()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To concatenate two arrays and return a new array with the combined elements.",
          "correct": true
        },
        "2": {
          "text": "To remove the last element of an array."
        },
        "3": {
          "text": "To reverse the order of elements in an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 270,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'splice()' method do in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "It removes the last element of an array."
        },
        "2": {
          "text": "It adds new elements to an array and/or removes existing elements.",
          "correct": true
        },
        "3": {
          "text": "It sorts the elements of an array in place."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 271,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'map()' and 'forEach()' methods in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "'map()' returns a new array with the results of applying a function to each element, while 'forEach()' does not.",
          "correct": true
        },
        "2": {
          "text": "'forEach()' returns a new array with the results of applying a function to each element, while 'map()' does not."
        },
        "3": {
          "text": "'map()' and 'forEach()' are interchangeable and have the same functionality."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 272,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'reduce()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To filter elements of an array based on a specified condition."
        },
        "2": {
          "text": "To apply a function to each element of an array and reduce the array to a single value.",
          "correct": true
        },
        "3": {
          "text": "To sort elements of an array in ascending order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 273,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the difference between 'filter()' and 'find()' methods in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "'filter()' returns an array of all elements that pass a test, while 'find()' returns the first element that passes a test.",
          "correct": true
        },
        "2": {
          "text": "'find()' returns an array of all elements that pass a test, while 'filter()' returns the first element that passes a test."
        },
        "3": {
          "text": "'filter()' and 'find()' have the same functionality."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 274,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'every()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To check if at least one element of an array passes a test."
        },
        "2": {
          "text": "To check if every element of an array passes a test.",
          "correct": true
        },
        "3": {
          "text": "To check if no elements of an array pass a test."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 275,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a generator in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that generates random numbers."
        },
        "2": {
          "text": "A function that can be paused and resumed, yielding multiple values over time.",
          "correct": true
        },
        "3": {
          "text": "A function that generates HTML elements dynamically."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 276,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'setTimeout()' function used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To execute a function repeatedly at set time intervals."
        },
        "2": {
          "text": "To execute a function after a specified delay.",
          "correct": true
        },
        "3": {
          "text": "To execute a function immediately after its declaration."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 277,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the result of 10 + '5' in JavaScript?",
      "answers": {
        "1": {
          "text": "'105'"
        },
        "2": {
          "text": "15",
          "correct": true
        },
        "3": {
          "text": "NaN"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 278,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'pop()' method do in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "Adds a new element to the beginning of an array."
        },
        "2": {
          "text": "Removes the last element from an array and returns it.",
          "correct": true
        },
        "3": {
          "text": "Sorts the elements of an array in descending order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 279,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'find()' and 'findIndex()' methods in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "'find()' returns the first element that passes a test, while 'findIndex()' returns the index of the first element that passes a test.",
          "correct": true
        },
        "2": {
          "text": "'findIndex()' returns the first element that passes a test, while 'find()' returns the index of the first element that passes a test."
        },
        "3": {
          "text": "'find()' and 'findIndex()' have the same functionality."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 280,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'some()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To check if at least one element of an array passes a test.",
          "correct": true
        },
        "2": {
          "text": "To check if every element of an array passes a test."
        },
        "3": {
          "text": "To check if no elements of an array pass a test."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 281,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'bind()' method used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To apply a function to all elements of an array."
        },
        "2": {
          "text": "To bind a function to a specified context, effectively setting the 'this' value.",
          "correct": true
        },
        "3": {
          "text": "To create a new array containing the results of calling a provided function on every element in the calling array."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 282,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'Object.keys()' method used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To return an array of a given object's own enumerable property names in the same order as found by a 'for...in' loop.",
          "correct": true
        },
        "2": {
          "text": "To determine if a given object has a specific property."
        },
        "3": {
          "text": "To create a new object with the specified prototype object."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 283,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'Array.isArray()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To check if a variable is an array.",
          "correct": true
        },
        "2": {
          "text": "To check if a variable is an object."
        },
        "3": {
          "text": "To convert an array-like object into an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 284,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a closure in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is immediately invoked after its declaration."
        },
        "2": {
          "text": "A function that has access to its parent scope, even after the parent function has closed.",
          "correct": true
        },
        "3": {
          "text": "A function that is defined inside another function and is executed immediately after its definition."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 285,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'isNaN()' function do in JavaScript?",
      "answers": {
        "1": {
          "text": "Checks if a value is not a number and returns true if it is.",
          "correct": true
        },
        "2": {
          "text": "Checks if a value is a number and returns true if it is."
        },
        "3": {
          "text": "Converts a value to a number and returns true if it is not a number."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 286,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'charAt()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Returns the character at a specified index in a string.",
          "correct": true
        },
        "2": {
          "text": "Returns the index of a specified character in a string."
        },
        "3": {
          "text": "Returns the length of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 287,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between '=='' and '===' operators in JavaScript?",
      "answers": {
        "1": {
          "text": "'==' performs type coercion, while '===' does not.",
          "correct": true
        },
        "2": {
          "text": "'==' checks for equality of values, while '===' checks for equality of both values and types."
        },
        "3": {
          "text": "'==' is used for strict comparison, while '===' is used for loose comparison."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 288,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'indexOf()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To return the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex, returns -1 if the value is not found.",
          "correct": true
        },
        "2": {
          "text": "To return the index of the last occurrence of a specified value in a string."
        },
        "3": {
          "text": "To remove the last element from an array and return it."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 289,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'typeof' operator used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To return the data type of a variable or expression.",
          "correct": true
        },
        "2": {
          "text": "To check if a variable is defined."
        },
        "3": {
          "text": "To convert a value to a specified data type."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 290,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
      "answers": {
        "1": {
          "text": "'null' represents the intentional absence of any object value, while 'undefined' represents a variable that has been declared but has not yet been assigned a value.",
          "correct": true
        },
        "2": {
          "text": "'null' represents a variable that has not been declared, while 'undefined' represents the intentional absence of any object value."
        },
        "3": {
          "text": "'null' represents a variable that has been declared but has not yet been assigned a value, while 'undefined' represents the intentional absence of any object value."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 291,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'parseFloat()' function in JavaScript?",
      "answers": {
        "1": {
          "text": "To convert a string to an integer."
        },
        "2": {
          "text": "To convert a string to a floating point number.",
          "correct": true
        },
        "3": {
          "text": "To convert a floating point number to a string."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 292,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a higher-order function in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that operates on arrays and returns a new array."
        },
        "2": {
          "text": "A function that accepts other functions as arguments or returns a function.",
          "correct": true
        },
        "3": {
          "text": "A function that has a higher precedence in execution order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 293,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the output of typeof undefined?",
      "answers": {
        "1": {
          "text": "'undefined'"
        },
        "2": {
          "text": "'string'"
        },
        "3": {
          "text": "'undefined'",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 294,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the result of the expression '5 + 2 + '8' in JavaScript?",
      "answers": {
        "1": {
          "text": "'578'"
        },
        "2": {
          "text": "'15'"
        },
        "3": {
          "text": "'78'",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 295,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'concat()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To concatenate two or more arrays and return a new array.",
          "correct": true
        },
        "2": {
          "text": "To remove elements from an array."
        },
        "3": {
          "text": "To reverse the order of elements in an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 296,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What does the 'isNaN()' function do in JavaScript?",
      "answers": {
        "1": {
          "text": "Checks if a value is not a number and returns true if it is.",
          "correct": true
        },
        "2": {
          "text": "Checks if a value is a number and returns true if it is."
        },
        "3": {
          "text": "Converts a value to a number and returns true if it is not a number."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 297,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the difference between 'slice()' and 'splice()' methods in JavaScript?",
      "answers": {
        "1": {
          "text": "'slice()' returns a shallow copy of a portion of an array into a new array, while 'splice()' changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
          "correct": true
        },
        "2": {
          "text": "'slice()' is used to remove elements from an array, while 'splice()' is used to add elements to an array."
        },
        "3": {
          "text": "'slice()' and 'splice()' have the same functionality."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 298,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What does the 'Object.keys()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Returns an array of a given object's own enumerable property names, in the same order as we get with a normal loop.",
          "correct": true
        },
        "2": {
          "text": "Returns the number of enumerable properties an object has."
        },
        "3": {
          "text": "Returns an array of a given object's own non-enumerable property names."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 299,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a closure in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is defined inside another function and is executed immediately after its definition."
        },
        "2": {
          "text": "A function that is immediately invoked after its declaration."
        },
        "3": {
          "text": "A function that has access to its parent scope, even after the parent function has closed.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 300,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'toLocaleString()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To convert a number to a string using a locale-specific representation.",
          "correct": true
        },
        "2": {
          "text": "To convert a string to a number using a locale-specific representation."
        },
        "3": {
          "text": "To return the length of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 301,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the purpose of the 'split()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To split a string into an array of substrings based on a specified separator.",
          "correct": true
        },
        "2": {
          "text": "To join multiple strings into a single string."
        },
        "3": {
          "text": "To remove whitespace from both ends of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 302,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the output of 3 + 2 + '7' in JavaScript?",
      "answers": {
        "1": {
          "text": "'12'"
        },
        "2": {
          "text": "'327'",
          "correct": true
        },
        "3": {
          "text": "'57'"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 303,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What does the 'splice()' method do in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "Adds new elements to an array and/or removes existing elements.",
          "correct": true
        },
        "2": {
          "text": "Reverses the order of elements in an array."
        },
        "3": {
          "text": "Sorts the elements of an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 304,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'forEach()' and 'map()' methods in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "'forEach()' returns undefined, while 'map()' returns a new array with the results of applying a function to each element.",
          "correct": true
        },
        "2": {
          "text": "'map()' returns undefined, while 'forEach()' returns a new array with the results of applying a function to each element."
        },
        "3": {
          "text": "'forEach()' and 'map()' have the same functionality."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 305,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'reduce()' method used for in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To filter elements of an array based on a specified condition."
        },
        "2": {
          "text": "To apply a function to each element of an array and reduce the array to a single value.",
          "correct": true
        },
        "3": {
          "text": "To sort elements of an array in ascending order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 306,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'findIndex()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To return the first element that passes a test."
        },
        "2": {
          "text": "To return the index of the first element that passes a test.",
          "correct": true
        },
        "3": {
          "text": "To return the index of the last occurrence of a specified value in an array."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 307,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a closure in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is immediately invoked after its declaration."
        },
        "2": {
          "text": "A function that has access to its parent scope, even after the parent function has closed.",
          "correct": true
        },
        "3": {
          "text": "A function that is defined inside another function and is executed immediately after its definition."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 308,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'toString()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To convert a string to uppercase."
        },
        "2": {
          "text": "To return the type of a variable as a string."
        },
        "3": {
          "text": "To return a string representing the object.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 309,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the purpose of the 'push()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To remove the last element from an array."
        },
        "2": {
          "text": "To add one or more elements to the end of an array.",
          "correct": true
        },
        "3": {
          "text": "To reverse the order of elements in an array."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 310,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the result of 'typeof null' in JavaScript?",
      "answers": {
        "1": {
          "text": "'null'"
        },
        "2": {
          "text": "'object'",
          "correct": true
        },
        "3": {
          "text": "'undefined'"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 311,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'filter()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To apply a function to each element of an array and reduce the array to a single value."
        },
        "2": {
          "text": "To create a new array with all elements that pass a test.",
          "correct": true
        },
        "3": {
          "text": "To return the index of the first element that passes a test."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 312,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'find()' and 'findIndex()' methods in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "'find()' returns the value of the first element that passes a test, while 'findIndex()' returns the index of the first element that passes a test."
        },
        "2": {
          "text": "'find()' returns the index of the first element that passes a test, while 'findIndex()' returns the value of the first element that passes a test."
        },
        "3": {
          "text": "'find()' returns the first element that passes a test, while 'findIndex()' returns the index of the first element that passes a test.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 313,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'toLocaleString()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To convert a number to a string using a locale-specific representation.",
          "correct": true
        },
        "2": {
          "text": "To convert a string to a number using a locale-specific representation."
        },
        "3": {
          "text": "To return the length of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 314,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'NaN' property in JavaScript?",
      "answers": {
        "1": {
          "text": "A property that represents the 'Not a Number' value.",
          "correct": true
        },
        "2": {
          "text": "A property that represents infinity."
        },
        "3": {
          "text": "A property that represents a null value."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 315,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'includes()' method used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To check if a string contains a specified substring."
        },
        "2": {
          "text": "To check if an array contains a specified element.",
          "correct": true
        },
        "3": {
          "text": "To check if an object contains a specified property."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 316,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a higher-order function in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that operates on arrays and returns a new array."
        },
        "2": {
          "text": "A function that accepts other functions as arguments or returns a function.",
          "correct": true
        },
        "3": {
          "text": "A function that has a higher precedence in execution order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 392,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the result of 5 + '3' in JavaScript?",
      "answers": {
        "1": {
          "text": "'53'"
        },
        "2": {
          "text": "8",
          "correct": true
        },
        "3": {
          "text": "NaN"
        }
      },
      "correct_answer": 2
    },
    {
      "id": 393,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'pop()' method do in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "Adds a new element to the beginning of an array."
        },
        "2": {
          "text": "Removes the last element from an array and returns it.",
          "correct": true
        },
        "3": {
          "text": "Sorts the elements of an array in descending order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 394,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'find()' and 'filter()' methods in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "'find()' returns the value of the first element that passes a test, while 'filter()' returns an array with all elements that pass the test.",
          "correct": true
        },
        "2": {
          "text": "'filter()' returns the value of the first element that passes a test, while 'find()' returns an array with all elements that pass the test."
        },
        "3": {
          "text": "'find()' and 'filter()' have the same functionality."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 395,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'reduce()' method in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To apply a function to each element of an array and reduce the array to a single value.",
          "correct": true
        },
        "2": {
          "text": "To create a new array with the results of calling a provided function on every element in the calling array."
        },
        "3": {
          "text": "To check if at least one element of an array passes a test."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 396,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'bind()' method used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To apply a function to all elements of an array."
        },
        "2": {
          "text": "To bind a function to a specified context, effectively setting the 'this' value.",
          "correct": true
        },
        "3": {
          "text": "To create a new array containing the results of calling a provided function on every element in the calling array."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 397,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'Object.keys()' method used for in JavaScript?",
      "answers": {
        "1": {
          "text": "To return an array of a given object's own enumerable property names in the same order as found by a 'for...in' loop.",
          "correct": true
        },
        "2": {
          "text": "To determine if a given object has a specific property."
        },
        "3": {
          "text": "To create a new object with the specified prototype object."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 398,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'Array.isArray()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To check if a variable is an array.",
          "correct": true
        },
        "2": {
          "text": "To check if a variable is an object."
        },
        "3": {
          "text": "To convert an array-like object into an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 399,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a closure in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is immediately invoked after its declaration."
        },
        "2": {
          "text": "A function that has access to its parent scope, even after the parent function has closed.",
          "correct": true
        },
        "3": {
          "text": "A function that is defined inside another function and is executed immediately after its definition."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 317,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'parseInt()' function do in JavaScript?",
      "answers": {
        "1": {
          "text": "Parses a string and returns an integer.",
          "correct": true
        },
        "2": {
          "text": "Converts a number to a string."
        },
        "3": {
          "text": "Returns the type of a variable as a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 318,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'toUpperCase()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Converts a string to lowercase."
        },
        "2": {
          "text": "Converts a string to uppercase.",
          "correct": true
        },
        "3": {
          "text": "Returns the length of a string."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 319,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'indexOf()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To return the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex.",
          "correct": true
        },
        "2": {
          "text": "To add elements to an array."
        },
        "3": {
          "text": "To remove elements from an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 320,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What does the 'shift()' method do in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "Removes the last element from an array and returns it."
        },
        "2": {
          "text": "Removes the first element from an array and returns it.",
          "correct": true
        },
        "3": {
          "text": "Sorts the elements of an array in ascending order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 321,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'filter()' method used for in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To apply a function to each element of an array and reduce the array to a single value."
        },
        "2": {
          "text": "To create a new array with all elements that pass a test.",
          "correct": true
        },
        "3": {
          "text": "To sort elements of an array in ascending order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 322,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What does the 'toFixed()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Converts a string to a fixed-point number."
        },
        "2": {
          "text": "Formats a number using fixed-point notation with a specified number of digits after the decimal point.",
          "correct": true
        },
        "3": {
          "text": "Returns the smallest integer greater than or equal to a given number."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 323,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a closure in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is immediately invoked after its declaration."
        },
        "2": {
          "text": "A function that has access to its parent scope, even after the parent function has closed.",
          "correct": true
        },
        "3": {
          "text": "A function that is defined inside another function and is executed immediately after its definition."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 324,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What does the 'isNaN()' function do in JavaScript?",
      "answers": {
        "1": {
          "text": "Checks if a value is not a number and returns true if it is.",
          "correct": true
        },
        "2": {
          "text": "Checks if a value is a number and returns true if it is."
        },
        "3": {
          "text": "Converts a value to a number and returns true if it is not a number."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 325,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'typeof' operator do in JavaScript?",
      "answers": {
        "1": {
          "text": "Returns the type of a variable or expression.",
          "correct": true
        },
        "2": {
          "text": "Converts a value to a string."
        },
        "3": {
          "text": "Returns the length of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 326,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the output of 2 + '3' in JavaScript?",
      "answers": {
        "1": {
          "text": "'23'",
          "correct": true
        },
        "2": {
          "text": "'5'"
        },
        "3": {
          "text": "'32'"
        }
      },
      "correct_answer": 1
    },
    {
      "id": 327,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'trim()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To remove elements from an array."
        },
        "2": {
          "text": "To remove whitespace from both ends of a string.",
          "correct": true
        },
        "3": {
          "text": "To convert a string to uppercase."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 328,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What does the 'pop()' method do in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "Removes the first element from an array and returns it."
        },
        "2": {
          "text": "Removes the last element from an array and returns it.",
          "correct": true
        },
        "3": {
          "text": "Sorts the elements of an array in ascending order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 329,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'forEach()' method used for in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To apply a function to each element of an array and reduce the array to a single value."
        },
        "2": {
          "text": "To create a new array with all elements that pass a test."
        },
        "3": {
          "text": "To execute a provided function once for each array element.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 330,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'Object.keys()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To return the number of enumerable properties an object has."
        },
        "2": {
          "text": "To return an array of a given object's own non-enumerable property names."
        },
        "3": {
          "text": "To return an array of a given object's own enumerable property names, in the same order as we get with a normal loop.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 331,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the difference between '=='' and '===' operators in JavaScript?",
      "answers": {
        "1": {
          "text": "'==' performs type coercion, while '===' does not.",
          "correct": true
        },
        "2": {
          "text": "'==' checks for equality of values, while '===' checks for equality of both values and types."
        },
        "3": {
          "text": "'==' is used for strict comparison, while '===' is used for loose comparison."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 332,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'toLocaleString()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To convert a number to a string using a locale-specific representation.",
          "correct": true
        },
        "2": {
          "text": "To convert a string to a number using a locale-specific representation."
        },
        "3": {
          "text": "To return the length of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 333,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the purpose of the 'toFixed()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To convert a string to a fixed-point number."
        },
        "2": {
          "text": "Formats a number using fixed-point notation with a specified number of digits after the decimal point.",
          "correct": true
        },
        "3": {
          "text": "Returns the smallest integer greater than or equal to a given number."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 334,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'concat()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Concatenates two or more strings and returns a new string.",
          "correct": true
        },
        "2": {
          "text": "Splits a string into an array of substrings based on a specified separator."
        },
        "3": {
          "text": "Removes whitespace from both ends of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 335,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'splice()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To add new elements to an array and/or remove existing elements.",
          "correct": true
        },
        "2": {
          "text": "To apply a function to each element of an array and reduce the array to a single value."
        },
        "3": {
          "text": "To reverse the order of elements in an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 336,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the difference between 'forEach()' and 'map()' methods in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "'forEach()' returns undefined, while 'map()' returns a new array with the results of applying a function to each element.",
          "correct": true
        },
        "2": {
          "text": "'map()' returns undefined, while 'forEach()' returns a new array with the results of applying a function to each element."
        },
        "3": {
          "text": "'forEach()' and 'map()' have the same functionality."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 337,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'Object.keys()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To return an array of a given object's own enumerable property names, in the same order as we get with a normal loop.",
          "correct": true
        },
        "2": {
          "text": "To return the number of enumerable properties an object has."
        },
        "3": {
          "text": "To return an array of a given object's own non-enumerable property names."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 338,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What does the 'isNaN()' function do in JavaScript?",
      "answers": {
        "1": {
          "text": "Checks if a value is not a number and returns true if it is.",
          "correct": true
        },
        "2": {
          "text": "Checks if a value is a number and returns true if it is."
        },
        "3": {
          "text": "Converts a value to a number and returns true if it is not a number."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 339,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a closure in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that is immediately invoked after its declaration."
        },
        "2": {
          "text": "A function that has access to its parent scope, even after the parent function has closed.",
          "correct": true
        },
        "3": {
          "text": "A function that is defined inside another function and is executed immediately after its definition."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 340,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the purpose of the 'toLocaleString()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "To convert a number to a string using a locale-specific representation.",
          "correct": true
        },
        "2": {
          "text": "To convert a string to a number using a locale-specific representation."
        },
        "3": {
          "text": "To return the length of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 341,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What is the purpose of the 'charAt()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "Returns the character at the specified index in a string.",
          "correct": true
        },
        "2": {
          "text": "Removes the last character from a string."
        },
        "3": {
          "text": "Converts a string to uppercase."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 342,
      "topic": "JavaScript",
      "level": "Easy",
      "question": "What does the 'substring()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Extracts the characters from a string, between two specified indices.",
          "correct": true
        },
        "2": {
          "text": "Replaces a specified value with another value in a string."
        },
        "3": {
          "text": "Removes whitespace from both ends of a string."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 343,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What is the purpose of the 'lastIndexOf()' method in JavaScript?",
      "answers": {
        "1": {
          "text": "Returns the first occurrence of a specified value in a string."
        },
        "2": {
          "text": "Returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex.",
          "correct": true
        },
        "3": {
          "text": "Returns the index within the calling String object of the first occurrence of the specified value."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 344,
      "topic": "JavaScript",
      "level": "Medium",
      "question": "What does the 'reverse()' method do in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "Reverses the order of elements in an array.",
          "correct": true
        },
        "2": {
          "text": "Sorts the elements of an array in descending order."
        },
        "3": {
          "text": "Returns the first element of an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 345,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is the 'some()' method used for in JavaScript arrays?",
      "answers": {
        "1": {
          "text": "To check if some elements in an array pass a test."
        },
        "2": {
          "text": "To apply a function to each element of an array and reduce the array to a single value."
        },
        "3": {
          "text": "To check if at least one element in an array passes a test.",
          "correct": true
        }
      },
      "correct_answer": 3
    },
    {
      "id": 346,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What does the 'reduceRight()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",
          "correct": true
        },
        "2": {
          "text": "Applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value."
        },
        "3": {
          "text": "Returns the index of the first occurrence of a specified value in an array."
        }
      },
      "correct_answer": 1
    },
    {
      "id": 347,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What is a higher-order function in JavaScript?",
      "answers": {
        "1": {
          "text": "A function that operates on arrays and returns a new array."
        },
        "2": {
          "text": "A function that accepts other functions as arguments or returns a function.",
          "correct": true
        },
        "3": {
          "text": "A function that has a higher precedence in execution order."
        }
      },
      "correct_answer": 2
    },
    {
      "id": 348,
      "topic": "JavaScript",
      "level": "Hard",
      "question": "What does the 'bind()' method do in JavaScript?",
      "answers": {
        "1": {
          "text": "Creates a new array with the results of calling a provided function on every element in the calling array."
        },
        "2": {
          "text": "Creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
          "correct": true
        },
        "3": {
          "text": "Sorts the elements of an array in ascending order."
        }
      },
      "correct_answer": 2
    }
  ]
}
